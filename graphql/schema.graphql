schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
columns and relationships of "acl.redshift_configuration_existence"
"""
type acl_redshift_configuration_existence {
  id: uuid

  """An object relationship"""
  system: system
  system_id: uuid
}

"""
aggregated selection of "acl.redshift_configuration_existence"
"""
type acl_redshift_configuration_existence_aggregate {
  aggregate: acl_redshift_configuration_existence_aggregate_fields
  nodes: [acl_redshift_configuration_existence!]!
}

"""
aggregate fields of "acl.redshift_configuration_existence"
"""
type acl_redshift_configuration_existence_aggregate_fields {
  count(columns: [acl_redshift_configuration_existence_select_column!], distinct: Boolean): Int!
  max: acl_redshift_configuration_existence_max_fields
  min: acl_redshift_configuration_existence_min_fields
}

"""
Boolean expression to filter rows from the table
"acl.redshift_configuration_existence". All fields are combined with a logical 'AND'.
"""
input acl_redshift_configuration_existence_bool_exp {
  _and: [acl_redshift_configuration_existence_bool_exp!]
  _not: acl_redshift_configuration_existence_bool_exp
  _or: [acl_redshift_configuration_existence_bool_exp!]
  id: uuid_comparison_exp
  system: system_bool_exp
  system_id: uuid_comparison_exp
}

"""
input type for inserting data into table "acl.redshift_configuration_existence"
"""
input acl_redshift_configuration_existence_insert_input {
  id: uuid
  system: system_obj_rel_insert_input
  system_id: uuid
}

"""aggregate max on columns"""
type acl_redshift_configuration_existence_max_fields {
  id: uuid
  system_id: uuid
}

"""aggregate min on columns"""
type acl_redshift_configuration_existence_min_fields {
  id: uuid
  system_id: uuid
}

"""
response of any mutation on the table "acl.redshift_configuration_existence"
"""
type acl_redshift_configuration_existence_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [acl_redshift_configuration_existence!]!
}

"""
input type for inserting object relation for remote table "acl.redshift_configuration_existence"
"""
input acl_redshift_configuration_existence_obj_rel_insert_input {
  data: acl_redshift_configuration_existence_insert_input!
}

"""
Ordering options when selecting data from "acl.redshift_configuration_existence".
"""
input acl_redshift_configuration_existence_order_by {
  id: order_by
  system: system_order_by
  system_id: order_by
}

"""
select columns of table "acl.redshift_configuration_existence"
"""
enum acl_redshift_configuration_existence_select_column {
  """column name"""
  id

  """column name"""
  system_id
}

"""
input type for updating data in table "acl.redshift_configuration_existence"
"""
input acl_redshift_configuration_existence_set_input {
  id: uuid
  system_id: uuid
}

"""
columns and relationships of "acl.unit_access"
"""
type acl_unit_access {
  """An object relationship"""
  unit: unit
  unit_id: uuid

  """An object relationship"""
  user: user
  user_id: uuid
}

"""
aggregated selection of "acl.unit_access"
"""
type acl_unit_access_aggregate {
  aggregate: acl_unit_access_aggregate_fields
  nodes: [acl_unit_access!]!
}

"""
aggregate fields of "acl.unit_access"
"""
type acl_unit_access_aggregate_fields {
  count(columns: [acl_unit_access_select_column!], distinct: Boolean): Int!
  max: acl_unit_access_max_fields
  min: acl_unit_access_min_fields
}

"""
order by aggregate values of table "acl.unit_access"
"""
input acl_unit_access_aggregate_order_by {
  count: order_by
  max: acl_unit_access_max_order_by
  min: acl_unit_access_min_order_by
}

"""
input type for inserting array relation for remote table "acl.unit_access"
"""
input acl_unit_access_arr_rel_insert_input {
  data: [acl_unit_access_insert_input!]!
}

"""
Boolean expression to filter rows from the table "acl.unit_access". All fields are combined with a logical 'AND'.
"""
input acl_unit_access_bool_exp {
  _and: [acl_unit_access_bool_exp!]
  _not: acl_unit_access_bool_exp
  _or: [acl_unit_access_bool_exp!]
  unit: unit_bool_exp
  unit_id: uuid_comparison_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
input type for inserting data into table "acl.unit_access"
"""
input acl_unit_access_insert_input {
  unit: unit_obj_rel_insert_input
  unit_id: uuid
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type acl_unit_access_max_fields {
  unit_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "acl.unit_access"
"""
input acl_unit_access_max_order_by {
  unit_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type acl_unit_access_min_fields {
  unit_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "acl.unit_access"
"""
input acl_unit_access_min_order_by {
  unit_id: order_by
  user_id: order_by
}

"""Ordering options when selecting data from "acl.unit_access"."""
input acl_unit_access_order_by {
  unit: unit_order_by
  unit_id: order_by
  user: user_order_by
  user_id: order_by
}

"""
select columns of table "acl.unit_access"
"""
enum acl_unit_access_select_column {
  """column name"""
  unit_id

  """column name"""
  user_id
}

"""
columns and relationships of "acl.users_id_email"
"""
type acl_users_id_email {
  email: String
  id: uuid
}

"""
aggregated selection of "acl.users_id_email"
"""
type acl_users_id_email_aggregate {
  aggregate: acl_users_id_email_aggregate_fields
  nodes: [acl_users_id_email!]!
}

"""
aggregate fields of "acl.users_id_email"
"""
type acl_users_id_email_aggregate_fields {
  count(columns: [acl_users_id_email_select_column!], distinct: Boolean): Int!
  max: acl_users_id_email_max_fields
  min: acl_users_id_email_min_fields
}

"""
Boolean expression to filter rows from the table "acl.users_id_email". All fields are combined with a logical 'AND'.
"""
input acl_users_id_email_bool_exp {
  _and: [acl_users_id_email_bool_exp!]
  _not: acl_users_id_email_bool_exp
  _or: [acl_users_id_email_bool_exp!]
  email: String_comparison_exp
  id: uuid_comparison_exp
}

"""
input type for inserting data into table "acl.users_id_email"
"""
input acl_users_id_email_insert_input {
  email: String
  id: uuid
}

"""aggregate max on columns"""
type acl_users_id_email_max_fields {
  email: String
  id: uuid
}

"""aggregate min on columns"""
type acl_users_id_email_min_fields {
  email: String
  id: uuid
}

"""
response of any mutation on the table "acl.users_id_email"
"""
type acl_users_id_email_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [acl_users_id_email!]!
}

"""Ordering options when selecting data from "acl.users_id_email"."""
input acl_users_id_email_order_by {
  email: order_by
  id: order_by
}

"""
select columns of table "acl.users_id_email"
"""
enum acl_users_id_email_select_column {
  """column name"""
  email

  """column name"""
  id
}

"""
input type for updating data in table "acl.users_id_email"
"""
input acl_users_id_email_set_input {
  email: String
  id: uuid
}

type Address {
  city: String!
  country: String!
  house: String!
  id: Int!
  street: String!
  type: String!
  zip: String!
}

input Boolean_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _cast: Boolean_cast_exp
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type Communication {
  id: Int!
  subscription: [CommunicationSubscription!]!
  type: String!
  value: String!
}

type CommunicationSubscription {
  consent: Boolean!
  id: Int!
  topic: CommunicationSubscriptionTopic!
  type: CommunicationSubscriptionType!
}

type CommunicationSubscriptionTopic {
  id: Int!
  name: String!
}

type CommunicationSubscriptionType {
  id: Int!
  name: String!
}

type Contact {
  addresses: [Address!]!
  communications: [Communication!]!
  first_name: String!
  id: Int!
  last_name: String!
  name_extension: String!
  org_name: String!
  source_list_id: Int!
  source_list_title: String!
  source_title: String!
}

"""
columns and relationships of "feature"
"""
type feature {
  description: String

  """An object relationship"""
  feature_group: feature_group
  feature_group_id: uuid

  """An object relationship"""
  feature_name: feature_name!
  id: uuid!
  name: feature_name_enum!

  """An array relationship"""
  system_feature_statuses(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): [system_feature_status!]!

  """An aggregate relationship"""
  system_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): system_feature_status_aggregate!

  """An array relationship"""
  unit_feature_statuses(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): [unit_feature_status!]!

  """An aggregate relationship"""
  unit_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): unit_feature_status_aggregate!

  """An array relationship"""
  unit_user_feature_statuses(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): [unit_user_feature_status!]!

  """An aggregate relationship"""
  unit_user_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): unit_user_feature_status_aggregate!
}

"""
aggregated selection of "feature"
"""
type feature_aggregate {
  aggregate: feature_aggregate_fields
  nodes: [feature!]!
}

"""
aggregate fields of "feature"
"""
type feature_aggregate_fields {
  count(columns: [feature_select_column!], distinct: Boolean): Int!
  max: feature_max_fields
  min: feature_min_fields
}

"""
order by aggregate values of table "feature"
"""
input feature_aggregate_order_by {
  count: order_by
  max: feature_max_order_by
  min: feature_min_order_by
}

"""
input type for inserting array relation for remote table "feature"
"""
input feature_arr_rel_insert_input {
  data: [feature_insert_input!]!

  """upsert condition"""
  on_conflict: feature_on_conflict
}

"""
Boolean expression to filter rows from the table "feature". All fields are combined with a logical 'AND'.
"""
input feature_bool_exp {
  _and: [feature_bool_exp!]
  _not: feature_bool_exp
  _or: [feature_bool_exp!]
  description: String_comparison_exp
  feature_group: feature_group_bool_exp
  feature_group_id: uuid_comparison_exp
  feature_name: feature_name_bool_exp
  id: uuid_comparison_exp
  name: feature_name_enum_comparison_exp
  system_feature_statuses: system_feature_status_bool_exp
  unit_feature_statuses: unit_feature_status_bool_exp
  unit_user_feature_statuses: unit_user_feature_status_bool_exp
}

"""
unique or primary key constraints on table "feature"
"""
enum feature_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  feature_name_key

  """
  unique or primary key constraint on columns "id"
  """
  feature_pkey
}

"""
columns and relationships of "feature_group"
"""
type feature_group {
  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [feature_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_group_order_by!]

    """filter the rows returned"""
    where: feature_group_bool_exp
  ): [feature_group!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_group_order_by!]

    """filter the rows returned"""
    where: feature_group_bool_exp
  ): feature_group_aggregate!

  """An array relationship"""
  features(
    """distinct select on columns"""
    distinct_on: [feature_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_order_by!]

    """filter the rows returned"""
    where: feature_bool_exp
  ): [feature!]!

  """An aggregate relationship"""
  features_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_order_by!]

    """filter the rows returned"""
    where: feature_bool_exp
  ): feature_aggregate!
  id: uuid!
  name: String!

  """An object relationship"""
  parent: feature_group
  parent_feature_group_id: uuid
}

"""
aggregated selection of "feature_group"
"""
type feature_group_aggregate {
  aggregate: feature_group_aggregate_fields
  nodes: [feature_group!]!
}

"""
aggregate fields of "feature_group"
"""
type feature_group_aggregate_fields {
  count(columns: [feature_group_select_column!], distinct: Boolean): Int!
  max: feature_group_max_fields
  min: feature_group_min_fields
}

"""
order by aggregate values of table "feature_group"
"""
input feature_group_aggregate_order_by {
  count: order_by
  max: feature_group_max_order_by
  min: feature_group_min_order_by
}

"""
input type for inserting array relation for remote table "feature_group"
"""
input feature_group_arr_rel_insert_input {
  data: [feature_group_insert_input!]!

  """upsert condition"""
  on_conflict: feature_group_on_conflict
}

"""
Boolean expression to filter rows from the table "feature_group". All fields are combined with a logical 'AND'.
"""
input feature_group_bool_exp {
  _and: [feature_group_bool_exp!]
  _not: feature_group_bool_exp
  _or: [feature_group_bool_exp!]
  children: feature_group_bool_exp
  features: feature_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  parent: feature_group_bool_exp
  parent_feature_group_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "feature_group"
"""
enum feature_group_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  feature_group_pkey
}

"""
input type for inserting data into table "feature_group"
"""
input feature_group_insert_input {
  children: feature_group_arr_rel_insert_input
  features: feature_arr_rel_insert_input
  id: uuid
  name: String
  parent: feature_group_obj_rel_insert_input
  parent_feature_group_id: uuid
}

"""aggregate max on columns"""
type feature_group_max_fields {
  id: uuid
  name: String
  parent_feature_group_id: uuid
}

"""
order by max() on columns of table "feature_group"
"""
input feature_group_max_order_by {
  id: order_by
  name: order_by
  parent_feature_group_id: order_by
}

"""aggregate min on columns"""
type feature_group_min_fields {
  id: uuid
  name: String
  parent_feature_group_id: uuid
}

"""
order by min() on columns of table "feature_group"
"""
input feature_group_min_order_by {
  id: order_by
  name: order_by
  parent_feature_group_id: order_by
}

"""
response of any mutation on the table "feature_group"
"""
type feature_group_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [feature_group!]!
}

"""
input type for inserting object relation for remote table "feature_group"
"""
input feature_group_obj_rel_insert_input {
  data: feature_group_insert_input!

  """upsert condition"""
  on_conflict: feature_group_on_conflict
}

"""
on_conflict condition type for table "feature_group"
"""
input feature_group_on_conflict {
  constraint: feature_group_constraint!
  update_columns: [feature_group_update_column!]! = []
  where: feature_group_bool_exp
}

"""Ordering options when selecting data from "feature_group"."""
input feature_group_order_by {
  children_aggregate: feature_group_aggregate_order_by
  features_aggregate: feature_aggregate_order_by
  id: order_by
  name: order_by
  parent: feature_group_order_by
  parent_feature_group_id: order_by
}

"""primary key columns input for table: feature_group"""
input feature_group_pk_columns_input {
  id: uuid!
}

"""
select columns of table "feature_group"
"""
enum feature_group_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  parent_feature_group_id
}

"""
input type for updating data in table "feature_group"
"""
input feature_group_set_input {
  id: uuid
  name: String
  parent_feature_group_id: uuid
}

"""
update columns of table "feature_group"
"""
enum feature_group_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  parent_feature_group_id
}

"""
input type for inserting data into table "feature"
"""
input feature_insert_input {
  description: String
  feature_group: feature_group_obj_rel_insert_input
  feature_group_id: uuid
  feature_name: feature_name_obj_rel_insert_input
  id: uuid
  name: feature_name_enum
  system_feature_statuses: system_feature_status_arr_rel_insert_input
  unit_feature_statuses: unit_feature_status_arr_rel_insert_input
  unit_user_feature_statuses: unit_user_feature_status_arr_rel_insert_input
}

"""aggregate max on columns"""
type feature_max_fields {
  description: String
  feature_group_id: uuid
  id: uuid
}

"""
order by max() on columns of table "feature"
"""
input feature_max_order_by {
  description: order_by
  feature_group_id: order_by
  id: order_by
}

"""aggregate min on columns"""
type feature_min_fields {
  description: String
  feature_group_id: uuid
  id: uuid
}

"""
order by min() on columns of table "feature"
"""
input feature_min_order_by {
  description: order_by
  feature_group_id: order_by
  id: order_by
}

"""
response of any mutation on the table "feature"
"""
type feature_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [feature!]!
}

"""
columns and relationships of "feature_name"
"""
type feature_name {
  """An object relationship"""
  feature: feature
  name: String!
}

"""
aggregated selection of "feature_name"
"""
type feature_name_aggregate {
  aggregate: feature_name_aggregate_fields
  nodes: [feature_name!]!
}

"""
aggregate fields of "feature_name"
"""
type feature_name_aggregate_fields {
  count(columns: [feature_name_select_column!], distinct: Boolean): Int!
  max: feature_name_max_fields
  min: feature_name_min_fields
}

"""
Boolean expression to filter rows from the table "feature_name". All fields are combined with a logical 'AND'.
"""
input feature_name_bool_exp {
  _and: [feature_name_bool_exp!]
  _not: feature_name_bool_exp
  _or: [feature_name_bool_exp!]
  feature: feature_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "feature_name"
"""
enum feature_name_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  feature_name_pkey
}

enum feature_name_enum {
  CUSTOMER_ADDRESS_EDIT
  CUSTOMER_ADDRESS_SHOW
  CUSTOMER_LIST_SHOW
  DUMMY
  DUMMY_CONTACT_LIST_SHOW
  EMAIL_CAMPAIGN_CREATE
  REFUND
}

"""
Boolean expression to compare columns of type "feature_name_enum". All fields are combined with logical 'AND'.
"""
input feature_name_enum_comparison_exp {
  _eq: feature_name_enum
  _in: [feature_name_enum!]
  _is_null: Boolean
  _neq: feature_name_enum
  _nin: [feature_name_enum!]
}

"""
input type for inserting data into table "feature_name"
"""
input feature_name_insert_input {
  feature: feature_obj_rel_insert_input
  name: String
}

"""aggregate max on columns"""
type feature_name_max_fields {
  name: String
}

"""aggregate min on columns"""
type feature_name_min_fields {
  name: String
}

"""
response of any mutation on the table "feature_name"
"""
type feature_name_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [feature_name!]!
}

"""
input type for inserting object relation for remote table "feature_name"
"""
input feature_name_obj_rel_insert_input {
  data: feature_name_insert_input!

  """upsert condition"""
  on_conflict: feature_name_on_conflict
}

"""
on_conflict condition type for table "feature_name"
"""
input feature_name_on_conflict {
  constraint: feature_name_constraint!
  update_columns: [feature_name_update_column!]! = []
  where: feature_name_bool_exp
}

"""Ordering options when selecting data from "feature_name"."""
input feature_name_order_by {
  feature: feature_order_by
  name: order_by
}

"""primary key columns input for table: feature_name"""
input feature_name_pk_columns_input {
  name: String!
}

"""
select columns of table "feature_name"
"""
enum feature_name_select_column {
  """column name"""
  name
}

"""
input type for updating data in table "feature_name"
"""
input feature_name_set_input {
  name: String
}

"""
update columns of table "feature_name"
"""
enum feature_name_update_column {
  """column name"""
  name
}

"""
input type for inserting object relation for remote table "feature"
"""
input feature_obj_rel_insert_input {
  data: feature_insert_input!

  """upsert condition"""
  on_conflict: feature_on_conflict
}

"""
on_conflict condition type for table "feature"
"""
input feature_on_conflict {
  constraint: feature_constraint!
  update_columns: [feature_update_column!]! = []
  where: feature_bool_exp
}

"""Ordering options when selecting data from "feature"."""
input feature_order_by {
  description: order_by
  feature_group: feature_group_order_by
  feature_group_id: order_by
  feature_name: feature_name_order_by
  id: order_by
  name: order_by
  system_feature_statuses_aggregate: system_feature_status_aggregate_order_by
  unit_feature_statuses_aggregate: unit_feature_status_aggregate_order_by
  unit_user_feature_statuses_aggregate: unit_user_feature_status_aggregate_order_by
}

"""primary key columns input for table: feature"""
input feature_pk_columns_input {
  id: uuid!
}

"""
select columns of table "feature"
"""
enum feature_select_column {
  """column name"""
  description

  """column name"""
  feature_group_id

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "feature"
"""
input feature_set_input {
  description: String
  feature_group_id: uuid
  id: uuid
  name: feature_name_enum
}

"""
columns and relationships of "feature_status"
"""
type feature_status {
  name: String!

  """An array relationship"""
  system_feature_statuses(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): [system_feature_status!]!

  """An aggregate relationship"""
  system_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): system_feature_status_aggregate!

  """An array relationship"""
  unit_feature_statuses(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): [unit_feature_status!]!

  """An aggregate relationship"""
  unit_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): unit_feature_status_aggregate!

  """An array relationship"""
  unit_user_feature_statuses(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): [unit_user_feature_status!]!

  """An aggregate relationship"""
  unit_user_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): unit_user_feature_status_aggregate!
}

"""
aggregated selection of "feature_status"
"""
type feature_status_aggregate {
  aggregate: feature_status_aggregate_fields
  nodes: [feature_status!]!
}

"""
aggregate fields of "feature_status"
"""
type feature_status_aggregate_fields {
  count(columns: [feature_status_select_column!], distinct: Boolean): Int!
  max: feature_status_max_fields
  min: feature_status_min_fields
}

"""
Boolean expression to filter rows from the table "feature_status". All fields are combined with a logical 'AND'.
"""
input feature_status_bool_exp {
  _and: [feature_status_bool_exp!]
  _not: feature_status_bool_exp
  _or: [feature_status_bool_exp!]
  name: String_comparison_exp
  system_feature_statuses: system_feature_status_bool_exp
  unit_feature_statuses: unit_feature_status_bool_exp
  unit_user_feature_statuses: unit_user_feature_status_bool_exp
}

"""
unique or primary key constraints on table "feature_status"
"""
enum feature_status_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  feature_status_pkey
}

enum feature_status_enum {
  DISABLED
  ENABLED
}

"""
Boolean expression to compare columns of type "feature_status_enum". All fields are combined with logical 'AND'.
"""
input feature_status_enum_comparison_exp {
  _eq: feature_status_enum
  _in: [feature_status_enum!]
  _is_null: Boolean
  _neq: feature_status_enum
  _nin: [feature_status_enum!]
}

"""
input type for inserting data into table "feature_status"
"""
input feature_status_insert_input {
  name: String
  system_feature_statuses: system_feature_status_arr_rel_insert_input
  unit_feature_statuses: unit_feature_status_arr_rel_insert_input
  unit_user_feature_statuses: unit_user_feature_status_arr_rel_insert_input
}

"""aggregate max on columns"""
type feature_status_max_fields {
  name: String
}

"""aggregate min on columns"""
type feature_status_min_fields {
  name: String
}

"""
response of any mutation on the table "feature_status"
"""
type feature_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [feature_status!]!
}

"""
input type for inserting object relation for remote table "feature_status"
"""
input feature_status_obj_rel_insert_input {
  data: feature_status_insert_input!

  """upsert condition"""
  on_conflict: feature_status_on_conflict
}

"""
on_conflict condition type for table "feature_status"
"""
input feature_status_on_conflict {
  constraint: feature_status_constraint!
  update_columns: [feature_status_update_column!]! = []
  where: feature_status_bool_exp
}

"""Ordering options when selecting data from "feature_status"."""
input feature_status_order_by {
  name: order_by
  system_feature_statuses_aggregate: system_feature_status_aggregate_order_by
  unit_feature_statuses_aggregate: unit_feature_status_aggregate_order_by
  unit_user_feature_statuses_aggregate: unit_user_feature_status_aggregate_order_by
}

"""primary key columns input for table: feature_status"""
input feature_status_pk_columns_input {
  name: String!
}

"""
select columns of table "feature_status"
"""
enum feature_status_select_column {
  """column name"""
  name
}

"""
input type for updating data in table "feature_status"
"""
input feature_status_set_input {
  name: String
}

"""
update columns of table "feature_status"
"""
enum feature_status_update_column {
  """column name"""
  name
}

"""
update columns of table "feature"
"""
enum feature_update_column {
  """column name"""
  description

  """column name"""
  feature_group_id

  """column name"""
  id

  """column name"""
  name
}

"""
columns and relationships of "global_admin"
"""
type global_admin {
  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "global_admin"
"""
type global_admin_aggregate {
  aggregate: global_admin_aggregate_fields
  nodes: [global_admin!]!
}

"""
aggregate fields of "global_admin"
"""
type global_admin_aggregate_fields {
  count(columns: [global_admin_select_column!], distinct: Boolean): Int!
  max: global_admin_max_fields
  min: global_admin_min_fields
}

"""
Boolean expression to filter rows from the table "global_admin". All fields are combined with a logical 'AND'.
"""
input global_admin_bool_exp {
  _and: [global_admin_bool_exp!]
  _not: global_admin_bool_exp
  _or: [global_admin_bool_exp!]
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "global_admin"
"""
enum global_admin_constraint {
  """
  unique or primary key constraint on columns "user_id"
  """
  system_admin_pkey
}

"""
input type for inserting data into table "global_admin"
"""
input global_admin_insert_input {
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type global_admin_max_fields {
  user_id: uuid
}

"""aggregate min on columns"""
type global_admin_min_fields {
  user_id: uuid
}

"""
response of any mutation on the table "global_admin"
"""
type global_admin_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [global_admin!]!
}

"""
input type for inserting object relation for remote table "global_admin"
"""
input global_admin_obj_rel_insert_input {
  data: global_admin_insert_input!

  """upsert condition"""
  on_conflict: global_admin_on_conflict
}

"""
on_conflict condition type for table "global_admin"
"""
input global_admin_on_conflict {
  constraint: global_admin_constraint!
  update_columns: [global_admin_update_column!]! = []
  where: global_admin_bool_exp
}

"""Ordering options when selecting data from "global_admin"."""
input global_admin_order_by {
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: global_admin"""
input global_admin_pk_columns_input {
  user_id: uuid!
}

"""
select columns of table "global_admin"
"""
enum global_admin_select_column {
  """column name"""
  user_id
}

"""
input type for updating data in table "global_admin"
"""
input global_admin_set_input {
  user_id: uuid
}

"""
update columns of table "global_admin"
"""
enum global_admin_update_column {
  """column name"""
  user_id
}

"""
columns and relationships of "language"
"""
type language {
  name: String!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!
}

"""
aggregated selection of "language"
"""
type language_aggregate {
  aggregate: language_aggregate_fields
  nodes: [language!]!
}

"""
aggregate fields of "language"
"""
type language_aggregate_fields {
  count(columns: [language_select_column!], distinct: Boolean): Int!
  max: language_max_fields
  min: language_min_fields
}

"""
Boolean expression to filter rows from the table "language". All fields are combined with a logical 'AND'.
"""
input language_bool_exp {
  _and: [language_bool_exp!]
  _not: language_bool_exp
  _or: [language_bool_exp!]
  name: String_comparison_exp
  users: user_bool_exp
}

"""
unique or primary key constraints on table "language"
"""
enum language_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  language_pkey
}

enum language_enum {
  de
  en
}

"""
Boolean expression to compare columns of type "language_enum". All fields are combined with logical 'AND'.
"""
input language_enum_comparison_exp {
  _eq: language_enum
  _in: [language_enum!]
  _is_null: Boolean
  _neq: language_enum
  _nin: [language_enum!]
}

"""
input type for inserting data into table "language"
"""
input language_insert_input {
  name: String
  users: user_arr_rel_insert_input
}

"""aggregate max on columns"""
type language_max_fields {
  name: String
}

"""aggregate min on columns"""
type language_min_fields {
  name: String
}

"""
response of any mutation on the table "language"
"""
type language_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [language!]!
}

"""
input type for inserting object relation for remote table "language"
"""
input language_obj_rel_insert_input {
  data: language_insert_input!

  """upsert condition"""
  on_conflict: language_on_conflict
}

"""
on_conflict condition type for table "language"
"""
input language_on_conflict {
  constraint: language_constraint!
  update_columns: [language_update_column!]! = []
  where: language_bool_exp
}

"""Ordering options when selecting data from "language"."""
input language_order_by {
  name: order_by
  users_aggregate: user_aggregate_order_by
}

"""primary key columns input for table: language"""
input language_pk_columns_input {
  name: String!
}

"""
select columns of table "language"
"""
enum language_select_column {
  """column name"""
  name
}

"""
input type for updating data in table "language"
"""
input language_set_input {
  name: String
}

"""
update columns of table "language"
"""
enum language_update_column {
  """column name"""
  name
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "acl.redshift_configuration_existence"
  """
  delete_acl_redshift_configuration_existence(
    """filter the rows which have to be deleted"""
    where: acl_redshift_configuration_existence_bool_exp!
  ): acl_redshift_configuration_existence_mutation_response

  """
  delete data from the table: "acl.users_id_email"
  """
  delete_acl_users_id_email(
    """filter the rows which have to be deleted"""
    where: acl_users_id_email_bool_exp!
  ): acl_users_id_email_mutation_response

  """
  delete data from the table: "feature"
  """
  delete_feature(
    """filter the rows which have to be deleted"""
    where: feature_bool_exp!
  ): feature_mutation_response

  """
  delete single row from the table: "feature"
  """
  delete_feature_by_pk(id: uuid!): feature

  """
  delete data from the table: "feature_group"
  """
  delete_feature_group(
    """filter the rows which have to be deleted"""
    where: feature_group_bool_exp!
  ): feature_group_mutation_response

  """
  delete single row from the table: "feature_group"
  """
  delete_feature_group_by_pk(id: uuid!): feature_group

  """
  delete data from the table: "feature_name"
  """
  delete_feature_name(
    """filter the rows which have to be deleted"""
    where: feature_name_bool_exp!
  ): feature_name_mutation_response

  """
  delete single row from the table: "feature_name"
  """
  delete_feature_name_by_pk(name: String!): feature_name

  """
  delete data from the table: "feature_status"
  """
  delete_feature_status(
    """filter the rows which have to be deleted"""
    where: feature_status_bool_exp!
  ): feature_status_mutation_response

  """
  delete single row from the table: "feature_status"
  """
  delete_feature_status_by_pk(name: String!): feature_status

  """
  delete data from the table: "global_admin"
  """
  delete_global_admin(
    """filter the rows which have to be deleted"""
    where: global_admin_bool_exp!
  ): global_admin_mutation_response

  """
  delete single row from the table: "global_admin"
  """
  delete_global_admin_by_pk(user_id: uuid!): global_admin

  """
  delete data from the table: "language"
  """
  delete_language(
    """filter the rows which have to be deleted"""
    where: language_bool_exp!
  ): language_mutation_response

  """
  delete single row from the table: "language"
  """
  delete_language_by_pk(name: String!): language

  """
  delete data from the table: "redshift_configuration"
  """
  delete_redshift_configuration(
    """filter the rows which have to be deleted"""
    where: redshift_configuration_bool_exp!
  ): redshift_configuration_mutation_response

  """
  delete single row from the table: "redshift_configuration"
  """
  delete_redshift_configuration_by_pk(id: uuid!): redshift_configuration

  """
  delete data from the table: "system"
  """
  delete_system(
    """filter the rows which have to be deleted"""
    where: system_bool_exp!
  ): system_mutation_response

  """
  delete data from the table: "system_admin"
  """
  delete_system_admin(
    """filter the rows which have to be deleted"""
    where: system_admin_bool_exp!
  ): system_admin_mutation_response

  """
  delete single row from the table: "system_admin"
  """
  delete_system_admin_by_pk(system_id: uuid!, user_id: uuid!): system_admin

  """
  delete single row from the table: "system"
  """
  delete_system_by_pk(id: uuid!): system

  """
  delete data from the table: "system_feature_status"
  """
  delete_system_feature_status(
    """filter the rows which have to be deleted"""
    where: system_feature_status_bool_exp!
  ): system_feature_status_mutation_response

  """
  delete single row from the table: "system_feature_status"
  """
  delete_system_feature_status_by_pk(feature_id: uuid!, system_id: uuid!): system_feature_status

  """
  delete data from the table: "unit"
  """
  delete_unit(
    """filter the rows which have to be deleted"""
    where: unit_bool_exp!
  ): unit_mutation_response

  """
  delete data from the table: "unit_admin"
  """
  delete_unit_admin(
    """filter the rows which have to be deleted"""
    where: unit_admin_bool_exp!
  ): unit_admin_mutation_response

  """
  delete single row from the table: "unit_admin"
  """
  delete_unit_admin_by_pk(unit_id: uuid!, user_id: uuid!): unit_admin

  """
  delete single row from the table: "unit"
  """
  delete_unit_by_pk(id: uuid!): unit

  """
  delete data from the table: "unit_feature_status"
  """
  delete_unit_feature_status(
    """filter the rows which have to be deleted"""
    where: unit_feature_status_bool_exp!
  ): unit_feature_status_mutation_response

  """
  delete single row from the table: "unit_feature_status"
  """
  delete_unit_feature_status_by_pk(feature_id: uuid!, unit_id: uuid!): unit_feature_status

  """
  delete data from the table: "unit_user"
  """
  delete_unit_user(
    """filter the rows which have to be deleted"""
    where: unit_user_bool_exp!
  ): unit_user_mutation_response

  """
  delete single row from the table: "unit_user"
  """
  delete_unit_user_by_pk(unit_id: uuid!, user_id: uuid!): unit_user

  """
  delete data from the table: "unit_user_feature_status"
  """
  delete_unit_user_feature_status(
    """filter the rows which have to be deleted"""
    where: unit_user_feature_status_bool_exp!
  ): unit_user_feature_status_mutation_response

  """
  delete single row from the table: "unit_user_feature_status"
  """
  delete_unit_user_feature_status_by_pk(feature_id: uuid!, unit_id: uuid!, user_id: uuid!): unit_user_feature_status

  """
  delete data from the table: "users"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_user_by_pk(id: uuid!): user
  delete_user_one_with_auth0_sync(id: uuid!): UserWithAuth0!

  """
  insert data into the table: "acl.redshift_configuration_existence"
  """
  insert_acl_redshift_configuration_existence(
    """the rows to be inserted"""
    objects: [acl_redshift_configuration_existence_insert_input!]!
  ): acl_redshift_configuration_existence_mutation_response

  """
  insert a single row into the table: "acl.redshift_configuration_existence"
  """
  insert_acl_redshift_configuration_existence_one(
    """the row to be inserted"""
    object: acl_redshift_configuration_existence_insert_input!
  ): acl_redshift_configuration_existence

  """
  insert data into the table: "acl.users_id_email"
  """
  insert_acl_users_id_email(
    """the rows to be inserted"""
    objects: [acl_users_id_email_insert_input!]!
  ): acl_users_id_email_mutation_response

  """
  insert a single row into the table: "acl.users_id_email"
  """
  insert_acl_users_id_email_one(
    """the row to be inserted"""
    object: acl_users_id_email_insert_input!
  ): acl_users_id_email

  """
  insert data into the table: "feature"
  """
  insert_feature(
    """the rows to be inserted"""
    objects: [feature_insert_input!]!

    """upsert condition"""
    on_conflict: feature_on_conflict
  ): feature_mutation_response

  """
  insert data into the table: "feature_group"
  """
  insert_feature_group(
    """the rows to be inserted"""
    objects: [feature_group_insert_input!]!

    """upsert condition"""
    on_conflict: feature_group_on_conflict
  ): feature_group_mutation_response

  """
  insert a single row into the table: "feature_group"
  """
  insert_feature_group_one(
    """the row to be inserted"""
    object: feature_group_insert_input!

    """upsert condition"""
    on_conflict: feature_group_on_conflict
  ): feature_group

  """
  insert data into the table: "feature_name"
  """
  insert_feature_name(
    """the rows to be inserted"""
    objects: [feature_name_insert_input!]!

    """upsert condition"""
    on_conflict: feature_name_on_conflict
  ): feature_name_mutation_response

  """
  insert a single row into the table: "feature_name"
  """
  insert_feature_name_one(
    """the row to be inserted"""
    object: feature_name_insert_input!

    """upsert condition"""
    on_conflict: feature_name_on_conflict
  ): feature_name

  """
  insert a single row into the table: "feature"
  """
  insert_feature_one(
    """the row to be inserted"""
    object: feature_insert_input!

    """upsert condition"""
    on_conflict: feature_on_conflict
  ): feature

  """
  insert data into the table: "feature_status"
  """
  insert_feature_status(
    """the rows to be inserted"""
    objects: [feature_status_insert_input!]!

    """upsert condition"""
    on_conflict: feature_status_on_conflict
  ): feature_status_mutation_response

  """
  insert a single row into the table: "feature_status"
  """
  insert_feature_status_one(
    """the row to be inserted"""
    object: feature_status_insert_input!

    """upsert condition"""
    on_conflict: feature_status_on_conflict
  ): feature_status

  """
  insert data into the table: "global_admin"
  """
  insert_global_admin(
    """the rows to be inserted"""
    objects: [global_admin_insert_input!]!

    """upsert condition"""
    on_conflict: global_admin_on_conflict
  ): global_admin_mutation_response

  """
  insert a single row into the table: "global_admin"
  """
  insert_global_admin_one(
    """the row to be inserted"""
    object: global_admin_insert_input!

    """upsert condition"""
    on_conflict: global_admin_on_conflict
  ): global_admin

  """
  insert data into the table: "language"
  """
  insert_language(
    """the rows to be inserted"""
    objects: [language_insert_input!]!

    """upsert condition"""
    on_conflict: language_on_conflict
  ): language_mutation_response

  """
  insert a single row into the table: "language"
  """
  insert_language_one(
    """the row to be inserted"""
    object: language_insert_input!

    """upsert condition"""
    on_conflict: language_on_conflict
  ): language

  """
  insert data into the table: "redshift_configuration"
  """
  insert_redshift_configuration(
    """the rows to be inserted"""
    objects: [redshift_configuration_insert_input!]!

    """upsert condition"""
    on_conflict: redshift_configuration_on_conflict
  ): redshift_configuration_mutation_response

  """
  insert a single row into the table: "redshift_configuration"
  """
  insert_redshift_configuration_one(
    """the row to be inserted"""
    object: redshift_configuration_insert_input!

    """upsert condition"""
    on_conflict: redshift_configuration_on_conflict
  ): redshift_configuration

  """
  insert data into the table: "system"
  """
  insert_system(
    """the rows to be inserted"""
    objects: [system_insert_input!]!

    """upsert condition"""
    on_conflict: system_on_conflict
  ): system_mutation_response

  """
  insert data into the table: "system_admin"
  """
  insert_system_admin(
    """the rows to be inserted"""
    objects: [system_admin_insert_input!]!

    """upsert condition"""
    on_conflict: system_admin_on_conflict
  ): system_admin_mutation_response

  """
  insert a single row into the table: "system_admin"
  """
  insert_system_admin_one(
    """the row to be inserted"""
    object: system_admin_insert_input!

    """upsert condition"""
    on_conflict: system_admin_on_conflict
  ): system_admin

  """
  insert data into the table: "system_feature_status"
  """
  insert_system_feature_status(
    """the rows to be inserted"""
    objects: [system_feature_status_insert_input!]!

    """upsert condition"""
    on_conflict: system_feature_status_on_conflict
  ): system_feature_status_mutation_response

  """
  insert a single row into the table: "system_feature_status"
  """
  insert_system_feature_status_one(
    """the row to be inserted"""
    object: system_feature_status_insert_input!

    """upsert condition"""
    on_conflict: system_feature_status_on_conflict
  ): system_feature_status

  """
  insert a single row into the table: "system"
  """
  insert_system_one(
    """the row to be inserted"""
    object: system_insert_input!

    """upsert condition"""
    on_conflict: system_on_conflict
  ): system

  """
  insert data into the table: "unit"
  """
  insert_unit(
    """the rows to be inserted"""
    objects: [unit_insert_input!]!

    """upsert condition"""
    on_conflict: unit_on_conflict
  ): unit_mutation_response

  """
  insert data into the table: "unit_admin"
  """
  insert_unit_admin(
    """the rows to be inserted"""
    objects: [unit_admin_insert_input!]!

    """upsert condition"""
    on_conflict: unit_admin_on_conflict
  ): unit_admin_mutation_response

  """
  insert a single row into the table: "unit_admin"
  """
  insert_unit_admin_one(
    """the row to be inserted"""
    object: unit_admin_insert_input!

    """upsert condition"""
    on_conflict: unit_admin_on_conflict
  ): unit_admin

  """
  insert data into the table: "unit_feature_status"
  """
  insert_unit_feature_status(
    """the rows to be inserted"""
    objects: [unit_feature_status_insert_input!]!

    """upsert condition"""
    on_conflict: unit_feature_status_on_conflict
  ): unit_feature_status_mutation_response

  """
  insert a single row into the table: "unit_feature_status"
  """
  insert_unit_feature_status_one(
    """the row to be inserted"""
    object: unit_feature_status_insert_input!

    """upsert condition"""
    on_conflict: unit_feature_status_on_conflict
  ): unit_feature_status

  """
  insert a single row into the table: "unit"
  """
  insert_unit_one(
    """the row to be inserted"""
    object: unit_insert_input!

    """upsert condition"""
    on_conflict: unit_on_conflict
  ): unit

  """
  insert data into the table: "unit_user"
  """
  insert_unit_user(
    """the rows to be inserted"""
    objects: [unit_user_insert_input!]!

    """upsert condition"""
    on_conflict: unit_user_on_conflict
  ): unit_user_mutation_response

  """
  insert data into the table: "unit_user_feature_status"
  """
  insert_unit_user_feature_status(
    """the rows to be inserted"""
    objects: [unit_user_feature_status_insert_input!]!

    """upsert condition"""
    on_conflict: unit_user_feature_status_on_conflict
  ): unit_user_feature_status_mutation_response

  """
  insert a single row into the table: "unit_user_feature_status"
  """
  insert_unit_user_feature_status_one(
    """the row to be inserted"""
    object: unit_user_feature_status_insert_input!

    """upsert condition"""
    on_conflict: unit_user_feature_status_on_conflict
  ): unit_user_feature_status

  """
  insert a single row into the table: "unit_user"
  """
  insert_unit_user_one(
    """the row to be inserted"""
    object: unit_user_insert_input!

    """upsert condition"""
    on_conflict: unit_user_on_conflict
  ): unit_user

  """
  insert data into the table: "users"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user
  insert_user_one_with_auth0_sync(email: String!, password: String!): UserWithAuth0!

  """
  update data of the table: "acl.redshift_configuration_existence"
  """
  update_acl_redshift_configuration_existence(
    """sets the columns of the filtered rows to the given values"""
    _set: acl_redshift_configuration_existence_set_input

    """filter the rows which have to be updated"""
    where: acl_redshift_configuration_existence_bool_exp!
  ): acl_redshift_configuration_existence_mutation_response

  """
  update data of the table: "acl.users_id_email"
  """
  update_acl_users_id_email(
    """sets the columns of the filtered rows to the given values"""
    _set: acl_users_id_email_set_input

    """filter the rows which have to be updated"""
    where: acl_users_id_email_bool_exp!
  ): acl_users_id_email_mutation_response

  """
  update data of the table: "feature"
  """
  update_feature(
    """sets the columns of the filtered rows to the given values"""
    _set: feature_set_input

    """filter the rows which have to be updated"""
    where: feature_bool_exp!
  ): feature_mutation_response

  """
  update single row of the table: "feature"
  """
  update_feature_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: feature_set_input
    pk_columns: feature_pk_columns_input!
  ): feature

  """
  update data of the table: "feature_group"
  """
  update_feature_group(
    """sets the columns of the filtered rows to the given values"""
    _set: feature_group_set_input

    """filter the rows which have to be updated"""
    where: feature_group_bool_exp!
  ): feature_group_mutation_response

  """
  update single row of the table: "feature_group"
  """
  update_feature_group_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: feature_group_set_input
    pk_columns: feature_group_pk_columns_input!
  ): feature_group

  """
  update data of the table: "feature_name"
  """
  update_feature_name(
    """sets the columns of the filtered rows to the given values"""
    _set: feature_name_set_input

    """filter the rows which have to be updated"""
    where: feature_name_bool_exp!
  ): feature_name_mutation_response

  """
  update single row of the table: "feature_name"
  """
  update_feature_name_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: feature_name_set_input
    pk_columns: feature_name_pk_columns_input!
  ): feature_name

  """
  update data of the table: "feature_status"
  """
  update_feature_status(
    """sets the columns of the filtered rows to the given values"""
    _set: feature_status_set_input

    """filter the rows which have to be updated"""
    where: feature_status_bool_exp!
  ): feature_status_mutation_response

  """
  update single row of the table: "feature_status"
  """
  update_feature_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: feature_status_set_input
    pk_columns: feature_status_pk_columns_input!
  ): feature_status

  """
  update data of the table: "global_admin"
  """
  update_global_admin(
    """sets the columns of the filtered rows to the given values"""
    _set: global_admin_set_input

    """filter the rows which have to be updated"""
    where: global_admin_bool_exp!
  ): global_admin_mutation_response

  """
  update single row of the table: "global_admin"
  """
  update_global_admin_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: global_admin_set_input
    pk_columns: global_admin_pk_columns_input!
  ): global_admin

  """
  update data of the table: "language"
  """
  update_language(
    """sets the columns of the filtered rows to the given values"""
    _set: language_set_input

    """filter the rows which have to be updated"""
    where: language_bool_exp!
  ): language_mutation_response

  """
  update single row of the table: "language"
  """
  update_language_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: language_set_input
    pk_columns: language_pk_columns_input!
  ): language

  """
  update data of the table: "redshift_configuration"
  """
  update_redshift_configuration(
    """sets the columns of the filtered rows to the given values"""
    _set: redshift_configuration_set_input

    """filter the rows which have to be updated"""
    where: redshift_configuration_bool_exp!
  ): redshift_configuration_mutation_response

  """
  update single row of the table: "redshift_configuration"
  """
  update_redshift_configuration_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: redshift_configuration_set_input
    pk_columns: redshift_configuration_pk_columns_input!
  ): redshift_configuration

  """
  update data of the table: "system"
  """
  update_system(
    """sets the columns of the filtered rows to the given values"""
    _set: system_set_input

    """filter the rows which have to be updated"""
    where: system_bool_exp!
  ): system_mutation_response

  """
  update data of the table: "system_admin"
  """
  update_system_admin(
    """sets the columns of the filtered rows to the given values"""
    _set: system_admin_set_input

    """filter the rows which have to be updated"""
    where: system_admin_bool_exp!
  ): system_admin_mutation_response

  """
  update single row of the table: "system_admin"
  """
  update_system_admin_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: system_admin_set_input
    pk_columns: system_admin_pk_columns_input!
  ): system_admin

  """
  update single row of the table: "system"
  """
  update_system_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: system_set_input
    pk_columns: system_pk_columns_input!
  ): system

  """
  update data of the table: "system_feature_status"
  """
  update_system_feature_status(
    """sets the columns of the filtered rows to the given values"""
    _set: system_feature_status_set_input

    """filter the rows which have to be updated"""
    where: system_feature_status_bool_exp!
  ): system_feature_status_mutation_response

  """
  update single row of the table: "system_feature_status"
  """
  update_system_feature_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: system_feature_status_set_input
    pk_columns: system_feature_status_pk_columns_input!
  ): system_feature_status

  """
  update data of the table: "unit"
  """
  update_unit(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_set_input

    """filter the rows which have to be updated"""
    where: unit_bool_exp!
  ): unit_mutation_response

  """
  update data of the table: "unit_admin"
  """
  update_unit_admin(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_admin_set_input

    """filter the rows which have to be updated"""
    where: unit_admin_bool_exp!
  ): unit_admin_mutation_response

  """
  update single row of the table: "unit_admin"
  """
  update_unit_admin_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_admin_set_input
    pk_columns: unit_admin_pk_columns_input!
  ): unit_admin

  """
  update single row of the table: "unit"
  """
  update_unit_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_set_input
    pk_columns: unit_pk_columns_input!
  ): unit

  """
  update data of the table: "unit_feature_status"
  """
  update_unit_feature_status(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_feature_status_set_input

    """filter the rows which have to be updated"""
    where: unit_feature_status_bool_exp!
  ): unit_feature_status_mutation_response

  """
  update single row of the table: "unit_feature_status"
  """
  update_unit_feature_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_feature_status_set_input
    pk_columns: unit_feature_status_pk_columns_input!
  ): unit_feature_status

  """
  update data of the table: "unit_user"
  """
  update_unit_user(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_user_set_input

    """filter the rows which have to be updated"""
    where: unit_user_bool_exp!
  ): unit_user_mutation_response

  """
  update single row of the table: "unit_user"
  """
  update_unit_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_user_set_input
    pk_columns: unit_user_pk_columns_input!
  ): unit_user

  """
  update data of the table: "unit_user_feature_status"
  """
  update_unit_user_feature_status(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_user_feature_status_set_input

    """filter the rows which have to be updated"""
    where: unit_user_feature_status_bool_exp!
  ): unit_user_feature_status_mutation_response

  """
  update single row of the table: "unit_user_feature_status"
  """
  update_unit_user_feature_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: unit_user_feature_status_set_input
    pk_columns: unit_user_feature_status_pk_columns_input!
  ): unit_user_feature_status

  """
  update data of the table: "users"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "users"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user
  update_user_deactivated_by_pk_with_auth0_sync(deactivated: Boolean!, id: uuid!): UserWithAuth0!
  update_user_email_by_pk_with_auth0_sync(email: String!, id: uuid!): UserWithAuth0!
  update_user_password_by_pk_with_auth0_sync(id: uuid!, password: String!): UserWithAuth0!
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type Person {
  contacts: [Contact!]!
  person_contact_id: Int!
}

type query_root {
  """
  fetch data from the table: "acl.redshift_configuration_existence"
  """
  acl_redshift_configuration_existence(
    """distinct select on columns"""
    distinct_on: [acl_redshift_configuration_existence_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_redshift_configuration_existence_order_by!]

    """filter the rows returned"""
    where: acl_redshift_configuration_existence_bool_exp
  ): [acl_redshift_configuration_existence!]!

  """
  fetch aggregated fields from the table: "acl.redshift_configuration_existence"
  """
  acl_redshift_configuration_existence_aggregate(
    """distinct select on columns"""
    distinct_on: [acl_redshift_configuration_existence_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_redshift_configuration_existence_order_by!]

    """filter the rows returned"""
    where: acl_redshift_configuration_existence_bool_exp
  ): acl_redshift_configuration_existence_aggregate!

  """
  fetch data from the table: "acl.unit_access"
  """
  acl_unit_access(
    """distinct select on columns"""
    distinct_on: [acl_unit_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_unit_access_order_by!]

    """filter the rows returned"""
    where: acl_unit_access_bool_exp
  ): [acl_unit_access!]!

  """
  fetch aggregated fields from the table: "acl.unit_access"
  """
  acl_unit_access_aggregate(
    """distinct select on columns"""
    distinct_on: [acl_unit_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_unit_access_order_by!]

    """filter the rows returned"""
    where: acl_unit_access_bool_exp
  ): acl_unit_access_aggregate!

  """
  fetch data from the table: "acl.users_id_email"
  """
  acl_users_id_email(
    """distinct select on columns"""
    distinct_on: [acl_users_id_email_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_users_id_email_order_by!]

    """filter the rows returned"""
    where: acl_users_id_email_bool_exp
  ): [acl_users_id_email!]!

  """
  fetch aggregated fields from the table: "acl.users_id_email"
  """
  acl_users_id_email_aggregate(
    """distinct select on columns"""
    distinct_on: [acl_users_id_email_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_users_id_email_order_by!]

    """filter the rows returned"""
    where: acl_users_id_email_bool_exp
  ): acl_users_id_email_aggregate!
  dwh_check_redshift_connection(database: String!, host: String!, password: String!, user: String!): Boolean!
  dwh_contact_sources(system_id: String!, unit_id: String!): [Source!]!
  dwh_people_count(search_str: String! = "", sources: [Int!]!, system_id: String!, unit_id: String!): Int!
  dwh_person(limit: Int! = 100, offset: Int! = 0, search_str: String! = "", sources: [Int!]!, system_id: String!, unit_id: String!): [Person!]!
  dwh_person_by_contact_id(contact_ids: [Int!]!, sources: [Int!] = null, system_id: String!, unit_id: String!): Person

  """
  fetch data from the table: "feature"
  """
  feature(
    """distinct select on columns"""
    distinct_on: [feature_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_order_by!]

    """filter the rows returned"""
    where: feature_bool_exp
  ): [feature!]!

  """
  fetch aggregated fields from the table: "feature"
  """
  feature_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_order_by!]

    """filter the rows returned"""
    where: feature_bool_exp
  ): feature_aggregate!

  """fetch data from the table: "feature" using primary key columns"""
  feature_by_pk(id: uuid!): feature

  """
  fetch data from the table: "feature_group"
  """
  feature_group(
    """distinct select on columns"""
    distinct_on: [feature_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_group_order_by!]

    """filter the rows returned"""
    where: feature_group_bool_exp
  ): [feature_group!]!

  """
  fetch aggregated fields from the table: "feature_group"
  """
  feature_group_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_group_order_by!]

    """filter the rows returned"""
    where: feature_group_bool_exp
  ): feature_group_aggregate!

  """fetch data from the table: "feature_group" using primary key columns"""
  feature_group_by_pk(id: uuid!): feature_group

  """
  fetch data from the table: "feature_name"
  """
  feature_name(
    """distinct select on columns"""
    distinct_on: [feature_name_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_name_order_by!]

    """filter the rows returned"""
    where: feature_name_bool_exp
  ): [feature_name!]!

  """
  fetch aggregated fields from the table: "feature_name"
  """
  feature_name_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_name_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_name_order_by!]

    """filter the rows returned"""
    where: feature_name_bool_exp
  ): feature_name_aggregate!

  """fetch data from the table: "feature_name" using primary key columns"""
  feature_name_by_pk(name: String!): feature_name

  """
  fetch data from the table: "feature_status"
  """
  feature_status(
    """distinct select on columns"""
    distinct_on: [feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_status_order_by!]

    """filter the rows returned"""
    where: feature_status_bool_exp
  ): [feature_status!]!

  """
  fetch aggregated fields from the table: "feature_status"
  """
  feature_status_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_status_order_by!]

    """filter the rows returned"""
    where: feature_status_bool_exp
  ): feature_status_aggregate!

  """fetch data from the table: "feature_status" using primary key columns"""
  feature_status_by_pk(name: String!): feature_status

  """
  fetch data from the table: "global_admin"
  """
  global_admin(
    """distinct select on columns"""
    distinct_on: [global_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [global_admin_order_by!]

    """filter the rows returned"""
    where: global_admin_bool_exp
  ): [global_admin!]!

  """
  fetch aggregated fields from the table: "global_admin"
  """
  global_admin_aggregate(
    """distinct select on columns"""
    distinct_on: [global_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [global_admin_order_by!]

    """filter the rows returned"""
    where: global_admin_bool_exp
  ): global_admin_aggregate!

  """fetch data from the table: "global_admin" using primary key columns"""
  global_admin_by_pk(user_id: uuid!): global_admin
  is_auth0_service_up: Boolean!

  """
  fetch data from the table: "language"
  """
  language(
    """distinct select on columns"""
    distinct_on: [language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [language_order_by!]

    """filter the rows returned"""
    where: language_bool_exp
  ): [language!]!

  """
  fetch aggregated fields from the table: "language"
  """
  language_aggregate(
    """distinct select on columns"""
    distinct_on: [language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [language_order_by!]

    """filter the rows returned"""
    where: language_bool_exp
  ): language_aggregate!

  """fetch data from the table: "language" using primary key columns"""
  language_by_pk(name: String!): language

  """
  fetch data from the table: "redshift_configuration"
  """
  redshift_configuration(
    """distinct select on columns"""
    distinct_on: [redshift_configuration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [redshift_configuration_order_by!]

    """filter the rows returned"""
    where: redshift_configuration_bool_exp
  ): [redshift_configuration!]!

  """
  fetch aggregated fields from the table: "redshift_configuration"
  """
  redshift_configuration_aggregate(
    """distinct select on columns"""
    distinct_on: [redshift_configuration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [redshift_configuration_order_by!]

    """filter the rows returned"""
    where: redshift_configuration_bool_exp
  ): redshift_configuration_aggregate!

  """
  fetch data from the table: "redshift_configuration" using primary key columns
  """
  redshift_configuration_by_pk(id: uuid!): redshift_configuration

  """
  fetch data from the table: "system"
  """
  system(
    """distinct select on columns"""
    distinct_on: [system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_order_by!]

    """filter the rows returned"""
    where: system_bool_exp
  ): [system!]!

  """
  fetch data from the table: "system_admin"
  """
  system_admin(
    """distinct select on columns"""
    distinct_on: [system_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_admin_order_by!]

    """filter the rows returned"""
    where: system_admin_bool_exp
  ): [system_admin!]!

  """
  fetch aggregated fields from the table: "system_admin"
  """
  system_admin_aggregate(
    """distinct select on columns"""
    distinct_on: [system_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_admin_order_by!]

    """filter the rows returned"""
    where: system_admin_bool_exp
  ): system_admin_aggregate!

  """fetch data from the table: "system_admin" using primary key columns"""
  system_admin_by_pk(system_id: uuid!, user_id: uuid!): system_admin

  """
  fetch aggregated fields from the table: "system"
  """
  system_aggregate(
    """distinct select on columns"""
    distinct_on: [system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_order_by!]

    """filter the rows returned"""
    where: system_bool_exp
  ): system_aggregate!

  """fetch data from the table: "system" using primary key columns"""
  system_by_pk(id: uuid!): system

  """
  fetch data from the table: "system_feature_status"
  """
  system_feature_status(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): [system_feature_status!]!

  """
  fetch aggregated fields from the table: "system_feature_status"
  """
  system_feature_status_aggregate(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): system_feature_status_aggregate!

  """
  fetch data from the table: "system_feature_status" using primary key columns
  """
  system_feature_status_by_pk(feature_id: uuid!, system_id: uuid!): system_feature_status

  """
  fetch data from the table: "unit"
  """
  unit(
    """distinct select on columns"""
    distinct_on: [unit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_order_by!]

    """filter the rows returned"""
    where: unit_bool_exp
  ): [unit!]!

  """
  fetch data from the table: "unit_admin"
  """
  unit_admin(
    """distinct select on columns"""
    distinct_on: [unit_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_admin_order_by!]

    """filter the rows returned"""
    where: unit_admin_bool_exp
  ): [unit_admin!]!

  """
  fetch aggregated fields from the table: "unit_admin"
  """
  unit_admin_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_admin_order_by!]

    """filter the rows returned"""
    where: unit_admin_bool_exp
  ): unit_admin_aggregate!

  """fetch data from the table: "unit_admin" using primary key columns"""
  unit_admin_by_pk(unit_id: uuid!, user_id: uuid!): unit_admin

  """
  fetch aggregated fields from the table: "unit"
  """
  unit_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_order_by!]

    """filter the rows returned"""
    where: unit_bool_exp
  ): unit_aggregate!

  """fetch data from the table: "unit" using primary key columns"""
  unit_by_pk(id: uuid!): unit

  """
  fetch data from the table: "unit_feature_status"
  """
  unit_feature_status(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): [unit_feature_status!]!

  """
  fetch aggregated fields from the table: "unit_feature_status"
  """
  unit_feature_status_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): unit_feature_status_aggregate!

  """
  fetch data from the table: "unit_feature_status" using primary key columns
  """
  unit_feature_status_by_pk(feature_id: uuid!, unit_id: uuid!): unit_feature_status

  """
  fetch data from the table: "unit_user"
  """
  unit_user(
    """distinct select on columns"""
    distinct_on: [unit_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_order_by!]

    """filter the rows returned"""
    where: unit_user_bool_exp
  ): [unit_user!]!

  """
  fetch aggregated fields from the table: "unit_user"
  """
  unit_user_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_order_by!]

    """filter the rows returned"""
    where: unit_user_bool_exp
  ): unit_user_aggregate!

  """fetch data from the table: "unit_user" using primary key columns"""
  unit_user_by_pk(unit_id: uuid!, user_id: uuid!): unit_user

  """
  fetch data from the table: "unit_user_feature_status"
  """
  unit_user_feature_status(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): [unit_user_feature_status!]!

  """
  fetch aggregated fields from the table: "unit_user_feature_status"
  """
  unit_user_feature_status_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): unit_user_feature_status_aggregate!

  """
  fetch data from the table: "unit_user_feature_status" using primary key columns
  """
  unit_user_feature_status_by_pk(feature_id: uuid!, unit_id: uuid!, user_id: uuid!): unit_user_feature_status

  """
  fetch data from the table: "users"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "users"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  user_by_pk(id: uuid!): user
}

"""
columns and relationships of "redshift_configuration"
"""
type redshift_configuration {
  database: String!
  host: String!
  id: uuid!
  password: String!

  """An object relationship"""
  system: system!
  system_id: uuid!
  user: String!
}

"""
aggregated selection of "redshift_configuration"
"""
type redshift_configuration_aggregate {
  aggregate: redshift_configuration_aggregate_fields
  nodes: [redshift_configuration!]!
}

"""
aggregate fields of "redshift_configuration"
"""
type redshift_configuration_aggregate_fields {
  count(columns: [redshift_configuration_select_column!], distinct: Boolean): Int!
  max: redshift_configuration_max_fields
  min: redshift_configuration_min_fields
}

"""
Boolean expression to filter rows from the table "redshift_configuration". All fields are combined with a logical 'AND'.
"""
input redshift_configuration_bool_exp {
  _and: [redshift_configuration_bool_exp!]
  _not: redshift_configuration_bool_exp
  _or: [redshift_configuration_bool_exp!]
  database: String_comparison_exp
  host: String_comparison_exp
  id: uuid_comparison_exp
  password: String_comparison_exp
  system: system_bool_exp
  system_id: uuid_comparison_exp
  user: String_comparison_exp
}

"""
unique or primary key constraints on table "redshift_configuration"
"""
enum redshift_configuration_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  redshift_pkey

  """
  unique or primary key constraint on columns "system_id"
  """
  redshift_settings_customer_id_key
}

"""
input type for inserting data into table "redshift_configuration"
"""
input redshift_configuration_insert_input {
  database: String
  host: String
  id: uuid
  password: String
  system: system_obj_rel_insert_input
  system_id: uuid
  user: String
}

"""aggregate max on columns"""
type redshift_configuration_max_fields {
  database: String
  host: String
  id: uuid
  password: String
  system_id: uuid
  user: String
}

"""aggregate min on columns"""
type redshift_configuration_min_fields {
  database: String
  host: String
  id: uuid
  password: String
  system_id: uuid
  user: String
}

"""
response of any mutation on the table "redshift_configuration"
"""
type redshift_configuration_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [redshift_configuration!]!
}

"""
input type for inserting object relation for remote table "redshift_configuration"
"""
input redshift_configuration_obj_rel_insert_input {
  data: redshift_configuration_insert_input!

  """upsert condition"""
  on_conflict: redshift_configuration_on_conflict
}

"""
on_conflict condition type for table "redshift_configuration"
"""
input redshift_configuration_on_conflict {
  constraint: redshift_configuration_constraint!
  update_columns: [redshift_configuration_update_column!]! = []
  where: redshift_configuration_bool_exp
}

"""Ordering options when selecting data from "redshift_configuration"."""
input redshift_configuration_order_by {
  database: order_by
  host: order_by
  id: order_by
  password: order_by
  system: system_order_by
  system_id: order_by
  user: order_by
}

"""primary key columns input for table: redshift_configuration"""
input redshift_configuration_pk_columns_input {
  id: uuid!
}

"""
select columns of table "redshift_configuration"
"""
enum redshift_configuration_select_column {
  """column name"""
  database

  """column name"""
  host

  """column name"""
  id

  """column name"""
  password

  """column name"""
  system_id

  """column name"""
  user
}

"""
input type for updating data in table "redshift_configuration"
"""
input redshift_configuration_set_input {
  database: String
  host: String
  id: uuid
  password: String
  system_id: uuid
  user: String
}

"""
update columns of table "redshift_configuration"
"""
enum redshift_configuration_update_column {
  """column name"""
  database

  """column name"""
  host

  """column name"""
  id

  """column name"""
  password

  """column name"""
  system_id

  """column name"""
  user
}

type Source {
  id: String!
  source_lists: [SourceList!]!
  title: String!
}

type SourceList {
  id: Int!
  source_id: String!
  title: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "acl.redshift_configuration_existence"
  """
  acl_redshift_configuration_existence(
    """distinct select on columns"""
    distinct_on: [acl_redshift_configuration_existence_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_redshift_configuration_existence_order_by!]

    """filter the rows returned"""
    where: acl_redshift_configuration_existence_bool_exp
  ): [acl_redshift_configuration_existence!]!

  """
  fetch aggregated fields from the table: "acl.redshift_configuration_existence"
  """
  acl_redshift_configuration_existence_aggregate(
    """distinct select on columns"""
    distinct_on: [acl_redshift_configuration_existence_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_redshift_configuration_existence_order_by!]

    """filter the rows returned"""
    where: acl_redshift_configuration_existence_bool_exp
  ): acl_redshift_configuration_existence_aggregate!

  """
  fetch data from the table: "acl.unit_access"
  """
  acl_unit_access(
    """distinct select on columns"""
    distinct_on: [acl_unit_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_unit_access_order_by!]

    """filter the rows returned"""
    where: acl_unit_access_bool_exp
  ): [acl_unit_access!]!

  """
  fetch aggregated fields from the table: "acl.unit_access"
  """
  acl_unit_access_aggregate(
    """distinct select on columns"""
    distinct_on: [acl_unit_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_unit_access_order_by!]

    """filter the rows returned"""
    where: acl_unit_access_bool_exp
  ): acl_unit_access_aggregate!

  """
  fetch data from the table: "acl.users_id_email"
  """
  acl_users_id_email(
    """distinct select on columns"""
    distinct_on: [acl_users_id_email_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_users_id_email_order_by!]

    """filter the rows returned"""
    where: acl_users_id_email_bool_exp
  ): [acl_users_id_email!]!

  """
  fetch aggregated fields from the table: "acl.users_id_email"
  """
  acl_users_id_email_aggregate(
    """distinct select on columns"""
    distinct_on: [acl_users_id_email_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_users_id_email_order_by!]

    """filter the rows returned"""
    where: acl_users_id_email_bool_exp
  ): acl_users_id_email_aggregate!

  """
  fetch data from the table: "feature"
  """
  feature(
    """distinct select on columns"""
    distinct_on: [feature_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_order_by!]

    """filter the rows returned"""
    where: feature_bool_exp
  ): [feature!]!

  """
  fetch aggregated fields from the table: "feature"
  """
  feature_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_order_by!]

    """filter the rows returned"""
    where: feature_bool_exp
  ): feature_aggregate!

  """fetch data from the table: "feature" using primary key columns"""
  feature_by_pk(id: uuid!): feature

  """
  fetch data from the table: "feature_group"
  """
  feature_group(
    """distinct select on columns"""
    distinct_on: [feature_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_group_order_by!]

    """filter the rows returned"""
    where: feature_group_bool_exp
  ): [feature_group!]!

  """
  fetch aggregated fields from the table: "feature_group"
  """
  feature_group_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_group_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_group_order_by!]

    """filter the rows returned"""
    where: feature_group_bool_exp
  ): feature_group_aggregate!

  """fetch data from the table: "feature_group" using primary key columns"""
  feature_group_by_pk(id: uuid!): feature_group

  """
  fetch data from the table: "feature_name"
  """
  feature_name(
    """distinct select on columns"""
    distinct_on: [feature_name_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_name_order_by!]

    """filter the rows returned"""
    where: feature_name_bool_exp
  ): [feature_name!]!

  """
  fetch aggregated fields from the table: "feature_name"
  """
  feature_name_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_name_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_name_order_by!]

    """filter the rows returned"""
    where: feature_name_bool_exp
  ): feature_name_aggregate!

  """fetch data from the table: "feature_name" using primary key columns"""
  feature_name_by_pk(name: String!): feature_name

  """
  fetch data from the table: "feature_status"
  """
  feature_status(
    """distinct select on columns"""
    distinct_on: [feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_status_order_by!]

    """filter the rows returned"""
    where: feature_status_bool_exp
  ): [feature_status!]!

  """
  fetch aggregated fields from the table: "feature_status"
  """
  feature_status_aggregate(
    """distinct select on columns"""
    distinct_on: [feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [feature_status_order_by!]

    """filter the rows returned"""
    where: feature_status_bool_exp
  ): feature_status_aggregate!

  """fetch data from the table: "feature_status" using primary key columns"""
  feature_status_by_pk(name: String!): feature_status

  """
  fetch data from the table: "global_admin"
  """
  global_admin(
    """distinct select on columns"""
    distinct_on: [global_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [global_admin_order_by!]

    """filter the rows returned"""
    where: global_admin_bool_exp
  ): [global_admin!]!

  """
  fetch aggregated fields from the table: "global_admin"
  """
  global_admin_aggregate(
    """distinct select on columns"""
    distinct_on: [global_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [global_admin_order_by!]

    """filter the rows returned"""
    where: global_admin_bool_exp
  ): global_admin_aggregate!

  """fetch data from the table: "global_admin" using primary key columns"""
  global_admin_by_pk(user_id: uuid!): global_admin

  """
  fetch data from the table: "language"
  """
  language(
    """distinct select on columns"""
    distinct_on: [language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [language_order_by!]

    """filter the rows returned"""
    where: language_bool_exp
  ): [language!]!

  """
  fetch aggregated fields from the table: "language"
  """
  language_aggregate(
    """distinct select on columns"""
    distinct_on: [language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [language_order_by!]

    """filter the rows returned"""
    where: language_bool_exp
  ): language_aggregate!

  """fetch data from the table: "language" using primary key columns"""
  language_by_pk(name: String!): language

  """
  fetch data from the table: "redshift_configuration"
  """
  redshift_configuration(
    """distinct select on columns"""
    distinct_on: [redshift_configuration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [redshift_configuration_order_by!]

    """filter the rows returned"""
    where: redshift_configuration_bool_exp
  ): [redshift_configuration!]!

  """
  fetch aggregated fields from the table: "redshift_configuration"
  """
  redshift_configuration_aggregate(
    """distinct select on columns"""
    distinct_on: [redshift_configuration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [redshift_configuration_order_by!]

    """filter the rows returned"""
    where: redshift_configuration_bool_exp
  ): redshift_configuration_aggregate!

  """
  fetch data from the table: "redshift_configuration" using primary key columns
  """
  redshift_configuration_by_pk(id: uuid!): redshift_configuration

  """
  fetch data from the table: "system"
  """
  system(
    """distinct select on columns"""
    distinct_on: [system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_order_by!]

    """filter the rows returned"""
    where: system_bool_exp
  ): [system!]!

  """
  fetch data from the table: "system_admin"
  """
  system_admin(
    """distinct select on columns"""
    distinct_on: [system_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_admin_order_by!]

    """filter the rows returned"""
    where: system_admin_bool_exp
  ): [system_admin!]!

  """
  fetch aggregated fields from the table: "system_admin"
  """
  system_admin_aggregate(
    """distinct select on columns"""
    distinct_on: [system_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_admin_order_by!]

    """filter the rows returned"""
    where: system_admin_bool_exp
  ): system_admin_aggregate!

  """fetch data from the table: "system_admin" using primary key columns"""
  system_admin_by_pk(system_id: uuid!, user_id: uuid!): system_admin

  """
  fetch aggregated fields from the table: "system"
  """
  system_aggregate(
    """distinct select on columns"""
    distinct_on: [system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_order_by!]

    """filter the rows returned"""
    where: system_bool_exp
  ): system_aggregate!

  """fetch data from the table: "system" using primary key columns"""
  system_by_pk(id: uuid!): system

  """
  fetch data from the table: "system_feature_status"
  """
  system_feature_status(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): [system_feature_status!]!

  """
  fetch aggregated fields from the table: "system_feature_status"
  """
  system_feature_status_aggregate(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): system_feature_status_aggregate!

  """
  fetch data from the table: "system_feature_status" using primary key columns
  """
  system_feature_status_by_pk(feature_id: uuid!, system_id: uuid!): system_feature_status

  """
  fetch data from the table: "unit"
  """
  unit(
    """distinct select on columns"""
    distinct_on: [unit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_order_by!]

    """filter the rows returned"""
    where: unit_bool_exp
  ): [unit!]!

  """
  fetch data from the table: "unit_admin"
  """
  unit_admin(
    """distinct select on columns"""
    distinct_on: [unit_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_admin_order_by!]

    """filter the rows returned"""
    where: unit_admin_bool_exp
  ): [unit_admin!]!

  """
  fetch aggregated fields from the table: "unit_admin"
  """
  unit_admin_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_admin_order_by!]

    """filter the rows returned"""
    where: unit_admin_bool_exp
  ): unit_admin_aggregate!

  """fetch data from the table: "unit_admin" using primary key columns"""
  unit_admin_by_pk(unit_id: uuid!, user_id: uuid!): unit_admin

  """
  fetch aggregated fields from the table: "unit"
  """
  unit_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_order_by!]

    """filter the rows returned"""
    where: unit_bool_exp
  ): unit_aggregate!

  """fetch data from the table: "unit" using primary key columns"""
  unit_by_pk(id: uuid!): unit

  """
  fetch data from the table: "unit_feature_status"
  """
  unit_feature_status(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): [unit_feature_status!]!

  """
  fetch aggregated fields from the table: "unit_feature_status"
  """
  unit_feature_status_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): unit_feature_status_aggregate!

  """
  fetch data from the table: "unit_feature_status" using primary key columns
  """
  unit_feature_status_by_pk(feature_id: uuid!, unit_id: uuid!): unit_feature_status

  """
  fetch data from the table: "unit_user"
  """
  unit_user(
    """distinct select on columns"""
    distinct_on: [unit_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_order_by!]

    """filter the rows returned"""
    where: unit_user_bool_exp
  ): [unit_user!]!

  """
  fetch aggregated fields from the table: "unit_user"
  """
  unit_user_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_order_by!]

    """filter the rows returned"""
    where: unit_user_bool_exp
  ): unit_user_aggregate!

  """fetch data from the table: "unit_user" using primary key columns"""
  unit_user_by_pk(unit_id: uuid!, user_id: uuid!): unit_user

  """
  fetch data from the table: "unit_user_feature_status"
  """
  unit_user_feature_status(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): [unit_user_feature_status!]!

  """
  fetch aggregated fields from the table: "unit_user_feature_status"
  """
  unit_user_feature_status_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): unit_user_feature_status_aggregate!

  """
  fetch data from the table: "unit_user_feature_status" using primary key columns
  """
  unit_user_feature_status_by_pk(feature_id: uuid!, unit_id: uuid!, user_id: uuid!): unit_user_feature_status

  """
  fetch data from the table: "users"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "users"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  user_by_pk(id: uuid!): user
}

"""
columns and relationships of "system"
"""
type system {
  id: uuid!
  name: String!

  """An object relationship"""
  redshift_configuration: redshift_configuration

  """An object relationship"""
  redshift_configuration_existence: acl_redshift_configuration_existence

  """An array relationship"""
  system_admins(
    """distinct select on columns"""
    distinct_on: [system_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_admin_order_by!]

    """filter the rows returned"""
    where: system_admin_bool_exp
  ): [system_admin!]!

  """An aggregate relationship"""
  system_admins_aggregate(
    """distinct select on columns"""
    distinct_on: [system_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_admin_order_by!]

    """filter the rows returned"""
    where: system_admin_bool_exp
  ): system_admin_aggregate!

  """An array relationship"""
  system_feature_statuses(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): [system_feature_status!]!

  """An aggregate relationship"""
  system_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [system_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_feature_status_order_by!]

    """filter the rows returned"""
    where: system_feature_status_bool_exp
  ): system_feature_status_aggregate!

  """An array relationship"""
  units(
    """distinct select on columns"""
    distinct_on: [unit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_order_by!]

    """filter the rows returned"""
    where: unit_bool_exp
  ): [unit!]!

  """An aggregate relationship"""
  units_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_order_by!]

    """filter the rows returned"""
    where: unit_bool_exp
  ): unit_aggregate!
}

"""
columns and relationships of "system_admin"
"""
type system_admin {
  """An object relationship"""
  system: system!
  system_id: uuid!

  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "system_admin"
"""
type system_admin_aggregate {
  aggregate: system_admin_aggregate_fields
  nodes: [system_admin!]!
}

"""
aggregate fields of "system_admin"
"""
type system_admin_aggregate_fields {
  count(columns: [system_admin_select_column!], distinct: Boolean): Int!
  max: system_admin_max_fields
  min: system_admin_min_fields
}

"""
order by aggregate values of table "system_admin"
"""
input system_admin_aggregate_order_by {
  count: order_by
  max: system_admin_max_order_by
  min: system_admin_min_order_by
}

"""
input type for inserting array relation for remote table "system_admin"
"""
input system_admin_arr_rel_insert_input {
  data: [system_admin_insert_input!]!

  """upsert condition"""
  on_conflict: system_admin_on_conflict
}

"""
Boolean expression to filter rows from the table "system_admin". All fields are combined with a logical 'AND'.
"""
input system_admin_bool_exp {
  _and: [system_admin_bool_exp!]
  _not: system_admin_bool_exp
  _or: [system_admin_bool_exp!]
  system: system_bool_exp
  system_id: uuid_comparison_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "system_admin"
"""
enum system_admin_constraint {
  """
  unique or primary key constraint on columns "system_id", "user_id"
  """
  customer_admin_pkey
}

"""
input type for inserting data into table "system_admin"
"""
input system_admin_insert_input {
  system: system_obj_rel_insert_input
  system_id: uuid
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type system_admin_max_fields {
  system_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "system_admin"
"""
input system_admin_max_order_by {
  system_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type system_admin_min_fields {
  system_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "system_admin"
"""
input system_admin_min_order_by {
  system_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "system_admin"
"""
type system_admin_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [system_admin!]!
}

"""
on_conflict condition type for table "system_admin"
"""
input system_admin_on_conflict {
  constraint: system_admin_constraint!
  update_columns: [system_admin_update_column!]! = []
  where: system_admin_bool_exp
}

"""Ordering options when selecting data from "system_admin"."""
input system_admin_order_by {
  system: system_order_by
  system_id: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: system_admin"""
input system_admin_pk_columns_input {
  system_id: uuid!
  user_id: uuid!
}

"""
select columns of table "system_admin"
"""
enum system_admin_select_column {
  """column name"""
  system_id

  """column name"""
  user_id
}

"""
input type for updating data in table "system_admin"
"""
input system_admin_set_input {
  system_id: uuid
  user_id: uuid
}

"""
update columns of table "system_admin"
"""
enum system_admin_update_column {
  """column name"""
  system_id

  """column name"""
  user_id
}

"""
aggregated selection of "system"
"""
type system_aggregate {
  aggregate: system_aggregate_fields
  nodes: [system!]!
}

"""
aggregate fields of "system"
"""
type system_aggregate_fields {
  count(columns: [system_select_column!], distinct: Boolean): Int!
  max: system_max_fields
  min: system_min_fields
}

"""
Boolean expression to filter rows from the table "system". All fields are combined with a logical 'AND'.
"""
input system_bool_exp {
  _and: [system_bool_exp!]
  _not: system_bool_exp
  _or: [system_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
  redshift_configuration: redshift_configuration_bool_exp
  redshift_configuration_existence: acl_redshift_configuration_existence_bool_exp
  system_admins: system_admin_bool_exp
  system_feature_statuses: system_feature_status_bool_exp
  units: unit_bool_exp
}

"""
unique or primary key constraints on table "system"
"""
enum system_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  customer_pkey
}

"""
columns and relationships of "system_feature_status"
"""
type system_feature_status {
  """An object relationship"""
  feature: feature!
  feature_id: uuid!

  """An object relationship"""
  feature_status: feature_status!
  status: feature_status_enum!

  """An object relationship"""
  system: system!
  system_id: uuid!
}

"""
aggregated selection of "system_feature_status"
"""
type system_feature_status_aggregate {
  aggregate: system_feature_status_aggregate_fields
  nodes: [system_feature_status!]!
}

"""
aggregate fields of "system_feature_status"
"""
type system_feature_status_aggregate_fields {
  count(columns: [system_feature_status_select_column!], distinct: Boolean): Int!
  max: system_feature_status_max_fields
  min: system_feature_status_min_fields
}

"""
order by aggregate values of table "system_feature_status"
"""
input system_feature_status_aggregate_order_by {
  count: order_by
  max: system_feature_status_max_order_by
  min: system_feature_status_min_order_by
}

"""
input type for inserting array relation for remote table "system_feature_status"
"""
input system_feature_status_arr_rel_insert_input {
  data: [system_feature_status_insert_input!]!

  """upsert condition"""
  on_conflict: system_feature_status_on_conflict
}

"""
Boolean expression to filter rows from the table "system_feature_status". All fields are combined with a logical 'AND'.
"""
input system_feature_status_bool_exp {
  _and: [system_feature_status_bool_exp!]
  _not: system_feature_status_bool_exp
  _or: [system_feature_status_bool_exp!]
  feature: feature_bool_exp
  feature_id: uuid_comparison_exp
  feature_status: feature_status_bool_exp
  status: feature_status_enum_comparison_exp
  system: system_bool_exp
  system_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "system_feature_status"
"""
enum system_feature_status_constraint {
  """
  unique or primary key constraint on columns "system_id", "feature_id"
  """
  customer_feature_status_pkey
}

"""
input type for inserting data into table "system_feature_status"
"""
input system_feature_status_insert_input {
  feature: feature_obj_rel_insert_input
  feature_id: uuid
  feature_status: feature_status_obj_rel_insert_input
  status: feature_status_enum
  system: system_obj_rel_insert_input
  system_id: uuid
}

"""aggregate max on columns"""
type system_feature_status_max_fields {
  feature_id: uuid
  system_id: uuid
}

"""
order by max() on columns of table "system_feature_status"
"""
input system_feature_status_max_order_by {
  feature_id: order_by
  system_id: order_by
}

"""aggregate min on columns"""
type system_feature_status_min_fields {
  feature_id: uuid
  system_id: uuid
}

"""
order by min() on columns of table "system_feature_status"
"""
input system_feature_status_min_order_by {
  feature_id: order_by
  system_id: order_by
}

"""
response of any mutation on the table "system_feature_status"
"""
type system_feature_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [system_feature_status!]!
}

"""
on_conflict condition type for table "system_feature_status"
"""
input system_feature_status_on_conflict {
  constraint: system_feature_status_constraint!
  update_columns: [system_feature_status_update_column!]! = []
  where: system_feature_status_bool_exp
}

"""Ordering options when selecting data from "system_feature_status"."""
input system_feature_status_order_by {
  feature: feature_order_by
  feature_id: order_by
  feature_status: feature_status_order_by
  status: order_by
  system: system_order_by
  system_id: order_by
}

"""primary key columns input for table: system_feature_status"""
input system_feature_status_pk_columns_input {
  feature_id: uuid!
  system_id: uuid!
}

"""
select columns of table "system_feature_status"
"""
enum system_feature_status_select_column {
  """column name"""
  feature_id

  """column name"""
  status

  """column name"""
  system_id
}

"""
input type for updating data in table "system_feature_status"
"""
input system_feature_status_set_input {
  feature_id: uuid
  status: feature_status_enum
  system_id: uuid
}

"""
update columns of table "system_feature_status"
"""
enum system_feature_status_update_column {
  """column name"""
  feature_id

  """column name"""
  status

  """column name"""
  system_id
}

"""
input type for inserting data into table "system"
"""
input system_insert_input {
  id: uuid
  name: String
  redshift_configuration: redshift_configuration_obj_rel_insert_input
  redshift_configuration_existence: acl_redshift_configuration_existence_obj_rel_insert_input
  system_admins: system_admin_arr_rel_insert_input
  system_feature_statuses: system_feature_status_arr_rel_insert_input
  units: unit_arr_rel_insert_input
}

"""aggregate max on columns"""
type system_max_fields {
  id: uuid
  name: String
}

"""aggregate min on columns"""
type system_min_fields {
  id: uuid
  name: String
}

"""
response of any mutation on the table "system"
"""
type system_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [system!]!
}

"""
input type for inserting object relation for remote table "system"
"""
input system_obj_rel_insert_input {
  data: system_insert_input!

  """upsert condition"""
  on_conflict: system_on_conflict
}

"""
on_conflict condition type for table "system"
"""
input system_on_conflict {
  constraint: system_constraint!
  update_columns: [system_update_column!]! = []
  where: system_bool_exp
}

"""Ordering options when selecting data from "system"."""
input system_order_by {
  id: order_by
  name: order_by
  redshift_configuration: redshift_configuration_order_by
  redshift_configuration_existence: acl_redshift_configuration_existence_order_by
  system_admins_aggregate: system_admin_aggregate_order_by
  system_feature_statuses_aggregate: system_feature_status_aggregate_order_by
  units_aggregate: unit_aggregate_order_by
}

"""primary key columns input for table: system"""
input system_pk_columns_input {
  id: uuid!
}

"""
select columns of table "system"
"""
enum system_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "system"
"""
input system_set_input {
  id: uuid
  name: String
}

"""
update columns of table "system"
"""
enum system_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""
columns and relationships of "unit"
"""
type unit {
  id: uuid!
  name: String!

  """An object relationship"""
  system: system!
  system_id: uuid!

  """An array relationship"""
  unit_access(
    """distinct select on columns"""
    distinct_on: [acl_unit_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_unit_access_order_by!]

    """filter the rows returned"""
    where: acl_unit_access_bool_exp
  ): [acl_unit_access!]!

  """An aggregate relationship"""
  unit_access_aggregate(
    """distinct select on columns"""
    distinct_on: [acl_unit_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_unit_access_order_by!]

    """filter the rows returned"""
    where: acl_unit_access_bool_exp
  ): acl_unit_access_aggregate!

  """An array relationship"""
  unit_feature_statuses(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): [unit_feature_status!]!

  """An aggregate relationship"""
  unit_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_feature_status_bool_exp
  ): unit_feature_status_aggregate!

  """An array relationship"""
  unit_users(
    """distinct select on columns"""
    distinct_on: [unit_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_order_by!]

    """filter the rows returned"""
    where: unit_user_bool_exp
  ): [unit_user!]!

  """An aggregate relationship"""
  unit_users_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_order_by!]

    """filter the rows returned"""
    where: unit_user_bool_exp
  ): unit_user_aggregate!
}

"""
columns and relationships of "unit_admin"
"""
type unit_admin {
  unit_id: uuid!

  """An object relationship"""
  unit_user: unit_user
  user_id: uuid!
}

"""
aggregated selection of "unit_admin"
"""
type unit_admin_aggregate {
  aggregate: unit_admin_aggregate_fields
  nodes: [unit_admin!]!
}

"""
aggregate fields of "unit_admin"
"""
type unit_admin_aggregate_fields {
  count(columns: [unit_admin_select_column!], distinct: Boolean): Int!
  max: unit_admin_max_fields
  min: unit_admin_min_fields
}

"""
Boolean expression to filter rows from the table "unit_admin". All fields are combined with a logical 'AND'.
"""
input unit_admin_bool_exp {
  _and: [unit_admin_bool_exp!]
  _not: unit_admin_bool_exp
  _or: [unit_admin_bool_exp!]
  unit_id: uuid_comparison_exp
  unit_user: unit_user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "unit_admin"
"""
enum unit_admin_constraint {
  """
  unique or primary key constraint on columns "unit_id", "user_id"
  """
  unit_admin_pkey
}

"""
input type for inserting data into table "unit_admin"
"""
input unit_admin_insert_input {
  unit_id: uuid
  unit_user: unit_user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type unit_admin_max_fields {
  unit_id: uuid
  user_id: uuid
}

"""aggregate min on columns"""
type unit_admin_min_fields {
  unit_id: uuid
  user_id: uuid
}

"""
response of any mutation on the table "unit_admin"
"""
type unit_admin_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [unit_admin!]!
}

"""
input type for inserting object relation for remote table "unit_admin"
"""
input unit_admin_obj_rel_insert_input {
  data: unit_admin_insert_input!

  """upsert condition"""
  on_conflict: unit_admin_on_conflict
}

"""
on_conflict condition type for table "unit_admin"
"""
input unit_admin_on_conflict {
  constraint: unit_admin_constraint!
  update_columns: [unit_admin_update_column!]! = []
  where: unit_admin_bool_exp
}

"""Ordering options when selecting data from "unit_admin"."""
input unit_admin_order_by {
  unit_id: order_by
  unit_user: unit_user_order_by
  user_id: order_by
}

"""primary key columns input for table: unit_admin"""
input unit_admin_pk_columns_input {
  unit_id: uuid!
  user_id: uuid!
}

"""
select columns of table "unit_admin"
"""
enum unit_admin_select_column {
  """column name"""
  unit_id

  """column name"""
  user_id
}

"""
input type for updating data in table "unit_admin"
"""
input unit_admin_set_input {
  unit_id: uuid
  user_id: uuid
}

"""
update columns of table "unit_admin"
"""
enum unit_admin_update_column {
  """column name"""
  unit_id

  """column name"""
  user_id
}

"""
aggregated selection of "unit"
"""
type unit_aggregate {
  aggregate: unit_aggregate_fields
  nodes: [unit!]!
}

"""
aggregate fields of "unit"
"""
type unit_aggregate_fields {
  count(columns: [unit_select_column!], distinct: Boolean): Int!
  max: unit_max_fields
  min: unit_min_fields
}

"""
order by aggregate values of table "unit"
"""
input unit_aggregate_order_by {
  count: order_by
  max: unit_max_order_by
  min: unit_min_order_by
}

"""
input type for inserting array relation for remote table "unit"
"""
input unit_arr_rel_insert_input {
  data: [unit_insert_input!]!

  """upsert condition"""
  on_conflict: unit_on_conflict
}

"""
Boolean expression to filter rows from the table "unit". All fields are combined with a logical 'AND'.
"""
input unit_bool_exp {
  _and: [unit_bool_exp!]
  _not: unit_bool_exp
  _or: [unit_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
  system: system_bool_exp
  system_id: uuid_comparison_exp
  unit_access: acl_unit_access_bool_exp
  unit_feature_statuses: unit_feature_status_bool_exp
  unit_users: unit_user_bool_exp
}

"""
unique or primary key constraints on table "unit"
"""
enum unit_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  business_unit_pkey
}

"""
columns and relationships of "unit_feature_status"
"""
type unit_feature_status {
  """An object relationship"""
  feature: feature!
  feature_id: uuid!

  """An object relationship"""
  feature_status: feature_status!
  status: feature_status_enum!

  """An object relationship"""
  unit: unit!
  unit_id: uuid!
}

"""
aggregated selection of "unit_feature_status"
"""
type unit_feature_status_aggregate {
  aggregate: unit_feature_status_aggregate_fields
  nodes: [unit_feature_status!]!
}

"""
aggregate fields of "unit_feature_status"
"""
type unit_feature_status_aggregate_fields {
  count(columns: [unit_feature_status_select_column!], distinct: Boolean): Int!
  max: unit_feature_status_max_fields
  min: unit_feature_status_min_fields
}

"""
order by aggregate values of table "unit_feature_status"
"""
input unit_feature_status_aggregate_order_by {
  count: order_by
  max: unit_feature_status_max_order_by
  min: unit_feature_status_min_order_by
}

"""
input type for inserting array relation for remote table "unit_feature_status"
"""
input unit_feature_status_arr_rel_insert_input {
  data: [unit_feature_status_insert_input!]!

  """upsert condition"""
  on_conflict: unit_feature_status_on_conflict
}

"""
Boolean expression to filter rows from the table "unit_feature_status". All fields are combined with a logical 'AND'.
"""
input unit_feature_status_bool_exp {
  _and: [unit_feature_status_bool_exp!]
  _not: unit_feature_status_bool_exp
  _or: [unit_feature_status_bool_exp!]
  feature: feature_bool_exp
  feature_id: uuid_comparison_exp
  feature_status: feature_status_bool_exp
  status: feature_status_enum_comparison_exp
  unit: unit_bool_exp
  unit_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "unit_feature_status"
"""
enum unit_feature_status_constraint {
  """
  unique or primary key constraint on columns "unit_id", "feature_id"
  """
  business_unit_feature_status_pkey
}

"""
input type for inserting data into table "unit_feature_status"
"""
input unit_feature_status_insert_input {
  feature: feature_obj_rel_insert_input
  feature_id: uuid
  feature_status: feature_status_obj_rel_insert_input
  status: feature_status_enum
  unit: unit_obj_rel_insert_input
  unit_id: uuid
}

"""aggregate max on columns"""
type unit_feature_status_max_fields {
  feature_id: uuid
  unit_id: uuid
}

"""
order by max() on columns of table "unit_feature_status"
"""
input unit_feature_status_max_order_by {
  feature_id: order_by
  unit_id: order_by
}

"""aggregate min on columns"""
type unit_feature_status_min_fields {
  feature_id: uuid
  unit_id: uuid
}

"""
order by min() on columns of table "unit_feature_status"
"""
input unit_feature_status_min_order_by {
  feature_id: order_by
  unit_id: order_by
}

"""
response of any mutation on the table "unit_feature_status"
"""
type unit_feature_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [unit_feature_status!]!
}

"""
on_conflict condition type for table "unit_feature_status"
"""
input unit_feature_status_on_conflict {
  constraint: unit_feature_status_constraint!
  update_columns: [unit_feature_status_update_column!]! = []
  where: unit_feature_status_bool_exp
}

"""Ordering options when selecting data from "unit_feature_status"."""
input unit_feature_status_order_by {
  feature: feature_order_by
  feature_id: order_by
  feature_status: feature_status_order_by
  status: order_by
  unit: unit_order_by
  unit_id: order_by
}

"""primary key columns input for table: unit_feature_status"""
input unit_feature_status_pk_columns_input {
  feature_id: uuid!
  unit_id: uuid!
}

"""
select columns of table "unit_feature_status"
"""
enum unit_feature_status_select_column {
  """column name"""
  feature_id

  """column name"""
  status

  """column name"""
  unit_id
}

"""
input type for updating data in table "unit_feature_status"
"""
input unit_feature_status_set_input {
  feature_id: uuid
  status: feature_status_enum
  unit_id: uuid
}

"""
update columns of table "unit_feature_status"
"""
enum unit_feature_status_update_column {
  """column name"""
  feature_id

  """column name"""
  status

  """column name"""
  unit_id
}

"""
input type for inserting data into table "unit"
"""
input unit_insert_input {
  id: uuid
  name: String
  system: system_obj_rel_insert_input
  system_id: uuid
  unit_access: acl_unit_access_arr_rel_insert_input
  unit_feature_statuses: unit_feature_status_arr_rel_insert_input
  unit_users: unit_user_arr_rel_insert_input
}

"""aggregate max on columns"""
type unit_max_fields {
  id: uuid
  name: String
  system_id: uuid
}

"""
order by max() on columns of table "unit"
"""
input unit_max_order_by {
  id: order_by
  name: order_by
  system_id: order_by
}

"""aggregate min on columns"""
type unit_min_fields {
  id: uuid
  name: String
  system_id: uuid
}

"""
order by min() on columns of table "unit"
"""
input unit_min_order_by {
  id: order_by
  name: order_by
  system_id: order_by
}

"""
response of any mutation on the table "unit"
"""
type unit_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [unit!]!
}

"""
input type for inserting object relation for remote table "unit"
"""
input unit_obj_rel_insert_input {
  data: unit_insert_input!

  """upsert condition"""
  on_conflict: unit_on_conflict
}

"""
on_conflict condition type for table "unit"
"""
input unit_on_conflict {
  constraint: unit_constraint!
  update_columns: [unit_update_column!]! = []
  where: unit_bool_exp
}

"""Ordering options when selecting data from "unit"."""
input unit_order_by {
  id: order_by
  name: order_by
  system: system_order_by
  system_id: order_by
  unit_access_aggregate: acl_unit_access_aggregate_order_by
  unit_feature_statuses_aggregate: unit_feature_status_aggregate_order_by
  unit_users_aggregate: unit_user_aggregate_order_by
}

"""primary key columns input for table: unit"""
input unit_pk_columns_input {
  id: uuid!
}

"""
select columns of table "unit"
"""
enum unit_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  system_id
}

"""
input type for updating data in table "unit"
"""
input unit_set_input {
  id: uuid
  name: String
  system_id: uuid
}

"""
update columns of table "unit"
"""
enum unit_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  system_id
}

"""
columns and relationships of "unit_user"
"""
type unit_user {
  deactivated: Boolean!

  """An object relationship"""
  unit: unit!

  """An object relationship"""
  unit_admin: unit_admin
  unit_id: uuid!

  """An array relationship"""
  unit_user_feature_statuses(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): [unit_user_feature_status!]!

  """An aggregate relationship"""
  unit_user_feature_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_feature_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_feature_status_order_by!]

    """filter the rows returned"""
    where: unit_user_feature_status_bool_exp
  ): unit_user_feature_status_aggregate!

  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "unit_user"
"""
type unit_user_aggregate {
  aggregate: unit_user_aggregate_fields
  nodes: [unit_user!]!
}

"""
aggregate fields of "unit_user"
"""
type unit_user_aggregate_fields {
  count(columns: [unit_user_select_column!], distinct: Boolean): Int!
  max: unit_user_max_fields
  min: unit_user_min_fields
}

"""
order by aggregate values of table "unit_user"
"""
input unit_user_aggregate_order_by {
  count: order_by
  max: unit_user_max_order_by
  min: unit_user_min_order_by
}

"""
input type for inserting array relation for remote table "unit_user"
"""
input unit_user_arr_rel_insert_input {
  data: [unit_user_insert_input!]!

  """upsert condition"""
  on_conflict: unit_user_on_conflict
}

"""
Boolean expression to filter rows from the table "unit_user". All fields are combined with a logical 'AND'.
"""
input unit_user_bool_exp {
  _and: [unit_user_bool_exp!]
  _not: unit_user_bool_exp
  _or: [unit_user_bool_exp!]
  deactivated: Boolean_comparison_exp
  unit: unit_bool_exp
  unit_admin: unit_admin_bool_exp
  unit_id: uuid_comparison_exp
  unit_user_feature_statuses: unit_user_feature_status_bool_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "unit_user"
"""
enum unit_user_constraint {
  """
  unique or primary key constraint on columns "unit_id", "user_id"
  """
  business_unit_user_pkey
}

"""
columns and relationships of "unit_user_feature_status"
"""
type unit_user_feature_status {
  """An object relationship"""
  feature: feature!
  feature_id: uuid!

  """An object relationship"""
  feature_status: feature_status!
  status: feature_status_enum!
  unit_id: uuid!

  """An object relationship"""
  unit_user: unit_user
  user_id: uuid!
}

"""
aggregated selection of "unit_user_feature_status"
"""
type unit_user_feature_status_aggregate {
  aggregate: unit_user_feature_status_aggregate_fields
  nodes: [unit_user_feature_status!]!
}

"""
aggregate fields of "unit_user_feature_status"
"""
type unit_user_feature_status_aggregate_fields {
  count(columns: [unit_user_feature_status_select_column!], distinct: Boolean): Int!
  max: unit_user_feature_status_max_fields
  min: unit_user_feature_status_min_fields
}

"""
order by aggregate values of table "unit_user_feature_status"
"""
input unit_user_feature_status_aggregate_order_by {
  count: order_by
  max: unit_user_feature_status_max_order_by
  min: unit_user_feature_status_min_order_by
}

"""
input type for inserting array relation for remote table "unit_user_feature_status"
"""
input unit_user_feature_status_arr_rel_insert_input {
  data: [unit_user_feature_status_insert_input!]!

  """upsert condition"""
  on_conflict: unit_user_feature_status_on_conflict
}

"""
Boolean expression to filter rows from the table "unit_user_feature_status". All fields are combined with a logical 'AND'.
"""
input unit_user_feature_status_bool_exp {
  _and: [unit_user_feature_status_bool_exp!]
  _not: unit_user_feature_status_bool_exp
  _or: [unit_user_feature_status_bool_exp!]
  feature: feature_bool_exp
  feature_id: uuid_comparison_exp
  feature_status: feature_status_bool_exp
  status: feature_status_enum_comparison_exp
  unit_id: uuid_comparison_exp
  unit_user: unit_user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "unit_user_feature_status"
"""
enum unit_user_feature_status_constraint {
  """
  unique or primary key constraint on columns "unit_id", "user_id", "feature_id"
  """
  business_unit_user_feature_status_pkey
}

"""
input type for inserting data into table "unit_user_feature_status"
"""
input unit_user_feature_status_insert_input {
  feature: feature_obj_rel_insert_input
  feature_id: uuid
  feature_status: feature_status_obj_rel_insert_input
  status: feature_status_enum
  unit_id: uuid
  unit_user: unit_user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type unit_user_feature_status_max_fields {
  feature_id: uuid
  unit_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "unit_user_feature_status"
"""
input unit_user_feature_status_max_order_by {
  feature_id: order_by
  unit_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type unit_user_feature_status_min_fields {
  feature_id: uuid
  unit_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "unit_user_feature_status"
"""
input unit_user_feature_status_min_order_by {
  feature_id: order_by
  unit_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "unit_user_feature_status"
"""
type unit_user_feature_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [unit_user_feature_status!]!
}

"""
on_conflict condition type for table "unit_user_feature_status"
"""
input unit_user_feature_status_on_conflict {
  constraint: unit_user_feature_status_constraint!
  update_columns: [unit_user_feature_status_update_column!]! = []
  where: unit_user_feature_status_bool_exp
}

"""Ordering options when selecting data from "unit_user_feature_status"."""
input unit_user_feature_status_order_by {
  feature: feature_order_by
  feature_id: order_by
  feature_status: feature_status_order_by
  status: order_by
  unit_id: order_by
  unit_user: unit_user_order_by
  user_id: order_by
}

"""primary key columns input for table: unit_user_feature_status"""
input unit_user_feature_status_pk_columns_input {
  feature_id: uuid!
  unit_id: uuid!
  user_id: uuid!
}

"""
select columns of table "unit_user_feature_status"
"""
enum unit_user_feature_status_select_column {
  """column name"""
  feature_id

  """column name"""
  status

  """column name"""
  unit_id

  """column name"""
  user_id
}

"""
input type for updating data in table "unit_user_feature_status"
"""
input unit_user_feature_status_set_input {
  feature_id: uuid
  status: feature_status_enum
  unit_id: uuid
  user_id: uuid
}

"""
update columns of table "unit_user_feature_status"
"""
enum unit_user_feature_status_update_column {
  """column name"""
  feature_id

  """column name"""
  status

  """column name"""
  unit_id

  """column name"""
  user_id
}

"""
input type for inserting data into table "unit_user"
"""
input unit_user_insert_input {
  deactivated: Boolean
  unit: unit_obj_rel_insert_input
  unit_admin: unit_admin_obj_rel_insert_input
  unit_id: uuid
  unit_user_feature_statuses: unit_user_feature_status_arr_rel_insert_input
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type unit_user_max_fields {
  unit_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "unit_user"
"""
input unit_user_max_order_by {
  unit_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type unit_user_min_fields {
  unit_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "unit_user"
"""
input unit_user_min_order_by {
  unit_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "unit_user"
"""
type unit_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [unit_user!]!
}

"""
input type for inserting object relation for remote table "unit_user"
"""
input unit_user_obj_rel_insert_input {
  data: unit_user_insert_input!

  """upsert condition"""
  on_conflict: unit_user_on_conflict
}

"""
on_conflict condition type for table "unit_user"
"""
input unit_user_on_conflict {
  constraint: unit_user_constraint!
  update_columns: [unit_user_update_column!]! = []
  where: unit_user_bool_exp
}

"""Ordering options when selecting data from "unit_user"."""
input unit_user_order_by {
  deactivated: order_by
  unit: unit_order_by
  unit_admin: unit_admin_order_by
  unit_id: order_by
  unit_user_feature_statuses_aggregate: unit_user_feature_status_aggregate_order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: unit_user"""
input unit_user_pk_columns_input {
  unit_id: uuid!
  user_id: uuid!
}

"""
select columns of table "unit_user"
"""
enum unit_user_select_column {
  """column name"""
  deactivated

  """column name"""
  unit_id

  """column name"""
  user_id
}

"""
input type for updating data in table "unit_user"
"""
input unit_user_set_input {
  deactivated: Boolean
  unit_id: uuid
  user_id: uuid
}

"""
update columns of table "unit_user"
"""
enum unit_user_update_column {
  """column name"""
  deactivated

  """column name"""
  unit_id

  """column name"""
  user_id
}

"""
columns and relationships of "users"
"""
type user {
  auth0_id: String!
  deactivated: Boolean!
  email: String!
  first_name: String

  """An object relationship"""
  global_admin: global_admin
  id: uuid!
  language: language_enum

  """An object relationship"""
  languageByLanguage: language
  last_name: String

  """An array relationship"""
  system_admins(
    """distinct select on columns"""
    distinct_on: [system_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_admin_order_by!]

    """filter the rows returned"""
    where: system_admin_bool_exp
  ): [system_admin!]!

  """An aggregate relationship"""
  system_admins_aggregate(
    """distinct select on columns"""
    distinct_on: [system_admin_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_admin_order_by!]

    """filter the rows returned"""
    where: system_admin_bool_exp
  ): system_admin_aggregate!

  """An array relationship"""
  unit_access(
    """distinct select on columns"""
    distinct_on: [acl_unit_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_unit_access_order_by!]

    """filter the rows returned"""
    where: acl_unit_access_bool_exp
  ): [acl_unit_access!]!

  """An aggregate relationship"""
  unit_access_aggregate(
    """distinct select on columns"""
    distinct_on: [acl_unit_access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acl_unit_access_order_by!]

    """filter the rows returned"""
    where: acl_unit_access_bool_exp
  ): acl_unit_access_aggregate!

  """An array relationship"""
  unit_users(
    """distinct select on columns"""
    distinct_on: [unit_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_order_by!]

    """filter the rows returned"""
    where: unit_user_bool_exp
  ): [unit_user!]!

  """An aggregate relationship"""
  unit_users_aggregate(
    """distinct select on columns"""
    distinct_on: [unit_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [unit_user_order_by!]

    """filter the rows returned"""
    where: unit_user_bool_exp
  ): unit_user_aggregate!
}

"""
aggregated selection of "users"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "users"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
order by aggregate values of table "users"
"""
input user_aggregate_order_by {
  count: order_by
  max: user_max_order_by
  min: user_min_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input user_arr_rel_insert_input {
  data: [user_insert_input!]!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  auth0_id: String_comparison_exp
  deactivated: Boolean_comparison_exp
  email: String_comparison_exp
  first_name: String_comparison_exp
  global_admin: global_admin_bool_exp
  id: uuid_comparison_exp
  language: language_enum_comparison_exp
  languageByLanguage: language_bool_exp
  last_name: String_comparison_exp
  system_admins: system_admin_bool_exp
  unit_access: acl_unit_access_bool_exp
  unit_users: unit_user_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "auth0_id"
  """
  user_auth0_id_key

  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}

"""
input type for inserting data into table "users"
"""
input user_insert_input {
  auth0_id: String
  deactivated: Boolean
  email: String
  first_name: String
  global_admin: global_admin_obj_rel_insert_input
  id: uuid
  language: language_enum
  languageByLanguage: language_obj_rel_insert_input
  last_name: String
  system_admins: system_admin_arr_rel_insert_input
  unit_access: acl_unit_access_arr_rel_insert_input
  unit_users: unit_user_arr_rel_insert_input
}

"""aggregate max on columns"""
type user_max_fields {
  auth0_id: String
  email: String
  first_name: String
  id: uuid
  last_name: String
}

"""
order by max() on columns of table "users"
"""
input user_max_order_by {
  auth0_id: order_by
  email: order_by
  first_name: order_by
  id: order_by
  last_name: order_by
}

"""aggregate min on columns"""
type user_min_fields {
  auth0_id: String
  email: String
  first_name: String
  id: uuid
  last_name: String
}

"""
order by min() on columns of table "users"
"""
input user_min_order_by {
  auth0_id: order_by
  email: order_by
  first_name: order_by
  id: order_by
  last_name: order_by
}

"""
response of any mutation on the table "users"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "users"."""
input user_order_by {
  auth0_id: order_by
  deactivated: order_by
  email: order_by
  first_name: order_by
  global_admin: global_admin_order_by
  id: order_by
  language: order_by
  languageByLanguage: language_order_by
  last_name: order_by
  system_admins_aggregate: system_admin_aggregate_order_by
  unit_access_aggregate: acl_unit_access_aggregate_order_by
  unit_users_aggregate: unit_user_aggregate_order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum user_select_column {
  """column name"""
  auth0_id

  """column name"""
  deactivated

  """column name"""
  email

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  language

  """column name"""
  last_name
}

"""
input type for updating data in table "users"
"""
input user_set_input {
  auth0_id: String
  deactivated: Boolean
  email: String
  first_name: String
  id: uuid
  language: language_enum
  last_name: String
}

"""
update columns of table "users"
"""
enum user_update_column {
  """column name"""
  auth0_id

  """column name"""
  deactivated

  """column name"""
  email

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  language

  """column name"""
  last_name
}

type UserWithAuth0 {
  email: String!
  id: uuid!
}

scalar uuid

input uuid_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _cast: uuid_cast_exp
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

